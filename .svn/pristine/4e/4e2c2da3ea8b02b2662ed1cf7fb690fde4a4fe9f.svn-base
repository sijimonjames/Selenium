package com.acneuro.test.automation.uk_workflow_tests;

import java.sql.ResultSet;

import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Test;

import com.acneuro.test.automation.libraries.Constant;
import com.acneuro.test.automation.libraries.OracleJdbcConnection;
import com.acneuro.test.automation.libraries.QueryUtils;
import com.acneuro.test.automation.libraries.UKConfigLib;
import com.acneuro.test.automation.libraries.UKProjectSpecific;

public class TC_2_UKCustomerActivationWithPortIn {

	@Test

	public static void ukPortInWithPacCode() {
		String customerNumber = "";
		String customerId = "";
		String orderNumber = "";
		String orderStatus = "";

		try {
			activationOfNewOrder();
			UKProjectSpecific.LoginToUKMyJoi();
			UKProjectSpecific.ukPortInFromManageSettings();

			// Verification of PortIn success
			ResultSet queryCustomerNumber = OracleJdbcConnection
					.crmDatabaseSelectQuery(QueryUtils.queryMaxCustomerNumberUKCustomer());
			while (queryCustomerNumber.next()) {
				customerNumber = queryCustomerNumber.getString("MAX_CUSTOMER_NUMBER");
				System.out.println("Customer Number: " + customerNumber);
			}

			ResultSet queryCustomerId = OracleJdbcConnection
					.crmDatabaseSelectQuery(QueryUtils.queryCustomerIdUKCustomer(customerNumber));
			while (queryCustomerId.next()) {
				customerId = queryCustomerId.getString("ID");
				System.out.println("Customer ID:" + customerId);
			}

			ResultSet queryLatestOrderNumber = OracleJdbcConnection
					.crmDatabaseSelectQuery(QueryUtils.queryLatestOrderNumberForUKPortIN(customerId));
			while (queryLatestOrderNumber.next()) {
				orderNumber = queryLatestOrderNumber.getString("MAX(ORD_NUMBER)");
				System.out.println("Portin OrderNumber: " + orderNumber);
			}

			ResultSet queryOrderStatus = OracleJdbcConnection
					.crmDatabaseSelectQuery(QueryUtils.queryOrderDetails(orderNumber));
			while (queryOrderStatus.next()) {
				orderStatus = queryOrderStatus.getString("STATUS");
				System.out.println("Portin Order Status: " + orderStatus);
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
				Assert.assertEquals(orderStatus, "COMPLETED");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static void activationOfNewOrder() { // order activation
		String orderNumber = orderCreationForExistingCustomer();
		System.out.println(orderNumber);

		String orderId = "";
		// if order status is 'NEW' in database change to 'RESOLVING_TASKS'

		try {
			OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateOrderStatus(orderNumber));
			System.out.println("Update Query 1");
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.queryOrderStatus(orderNumber));
			while (resultSet.next()) {
				orderId = resultSet.getString("ID");
				System.out.println(orderId);
				System.out.println(resultSet.getString("ORD_NUMBER"));
				System.out.println(resultSet.getString("STATUS"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String taskId = ""; // Need task id to 'resolving_tasks'
		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.queryTaskId(orderId));
			while (resultSet.next()) {
				taskId = resultSet.getString("ID");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String latestPriId = "";
		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.querylatestProcessId(orderId));
			while (resultSet.next()) {
				latestPriId = resultSet.getString("max(PRI_ID)");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// RESOLVING_TASKS API signal
		try {
			UKProjectSpecific.resolvingTasksSignal(latestPriId, taskId);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// here we check if upfront payment action created
		boolean checkActionUpfrontPayment = UKProjectSpecific.checkIfActionExists(orderId, "ofUpfrontPaymentWait");
		Assert.assertTrue(checkActionUpfrontPayment);

		// here we check if upfront payment is finished successfully
		boolean upfrontPaymentActionIsDone = UKProjectSpecific.processUpfrontPayment(orderId);
		Assert.assertTrue(upfrontPaymentActionIsDone);

		// here we check if shipping signal action is created
		boolean checkActionmbShipWaiting = UKProjectSpecific.checkIfActionExists(orderId, "mbShipWaiting");
		Assert.assertTrue(checkActionmbShipWaiting);

		// here we check if upfront payment is finished successfully
		boolean mbShipWaitingIsDone = UKProjectSpecific.processShipWait(orderId);
		Assert.assertTrue(mbShipWaitingIsDone);

		// here we check if SIM activation action is created
		boolean checkActionmbSimActivation = UKProjectSpecific.checkIfActionExists(orderId, "mbSimActivation");
		Assert.assertTrue(checkActionmbSimActivation);

		// If SIM activation action present activate the SIM in MYJOi
		UKProjectSpecific.LoginToUKMyJoi();
		UKProjectSpecific.ActivateSimAfterLogin();
		Reporter.log("SIM activation is done using MyJOi", true);

		boolean checkActionmbProvisionWait = UKProjectSpecific.checkIfActionExists(orderId, "mbProvisionWait");
		Assert.assertTrue(checkActionmbProvisionWait);

		UKProjectSpecific.provisioningDuringActivationOfOrders(orderId);

	}

	public static String orderCreationForExistingCustomer() {
		// Checking the database for status="RESOLVING_TASKS"(sometimes "NEW")
		// change this always to "RESOLVING_TASKS"

		UKProjectSpecific.LoginToUKMyJoi();
		UKProjectSpecific.selectNeworderFromOurOffer();
		UKProjectSpecific.Our_Offer_add_to_basket();
		UKProjectSpecific.addToBasketWithoutPorting();
		UKProjectSpecific.Check_Out_Order();
		UKProjectSpecific.continue_step_3();
		UKProjectSpecific.orderSummaryPageForExitstingCustomer("99999");
		UKProjectSpecific.Payment_Datacash(Constant.Card_Type1, Constant.Type1_CC_number, "2018",
				Constant.Type1_CC_CVV);
		UKProjectSpecific.verifyTitleOfPage("Your JOi Order Confirmation");
		UKProjectSpecific.takeScreenShot("C:/testing/workspace/Screenshots/mvno/Order_Creation.png");
		String getOrderNumber = UKProjectSpecific.getAndVerifyText("//div/article/section/p[2]/strong");
		String orderNumber = getOrderNumber.substring(1);
		System.out.println("Order is created successfully!! Your Order number is: " + orderNumber);
		UKConfigLib.driver.quit();
		return orderNumber;
	}

}