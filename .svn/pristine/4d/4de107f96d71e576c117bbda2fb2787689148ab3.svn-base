package com.acneuro.test.automation.france_workflow_tests;

import java.sql.ResultSet;

import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Test;

import com.acneuro.test.automation.db_connection_libraries.DBUtils;
import com.acneuro.test.automation.db_connection_libraries.OracleJdbcConnection;
import com.acneuro.test.automation.libraries.Constant;
import com.acneuro.test.automation.libraries.RestApiAutomation;

import mvno_project_library.FranceProjectSpecific;

public class TC_6_FrancePortOutTests {
	@Test
	public void portoutFrance() {

		String portOutId = "";
		String msisdn = "";
		String processId = "";

		// Take portout id from database/ ATTRIBUTE1 from CIN_PRODUCTS table
		portOutId = FranceProjectSpecific.fetchPortOutRioCodeFromLatestCustomer();
		msisdn = FranceProjectSpecific.fetchMsidnOfLatestCustomer();
		// fake EGP request API call to startPortout
		String apiPortOutForNumpos = RestApiAutomation.requestToStartPortoutForFrance(msisdn, portOutId);
		System.out.println(apiPortOutForNumpos);

		RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, apiPortOutForNumpos);
		System.out.println("First portout request is processed");

		// Check for pONumPos action is created
		processId = FranceProjectSpecific.verifyLatestPortinOrderInNumpos(msisdn);
		FranceProjectSpecific.checkIfActionExistsWithProcessId(processId, "pONumPos");
		
		// EGP request to update Cues
		String apiPortOutForCues = RestApiAutomation.secondRequestToStartPortoutForFrance(msisdn, portOutId);
		System.out.println(apiPortOutForCues);

		RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, apiPortOutForCues);
		System.out.println("Second portout post request is processed");

		// Check for the 'pOProv' action is created
		ResultSet queryProcessId = null;

		queryProcessId = OracleJdbcConnection
				.numposDatabaseSelectQuery(DBUtils.queryPortOutProcessIdfromNuposDB(msisdn));

		try {
			while (queryProcessId.next()) {

				processId = queryProcessId.getString("REFERENCE_ID");
				System.out.println(String.format("The process id of portout process is %s", processId));
				if (queryProcessId.wasNull()) {
					System.out.println("Test failed as Numpos is not updated with processed ID");
					Assert.assertEquals(processId, "1");
				} else {
					Boolean provisioning = FranceProjectSpecific.checkIfActionExistsWithProcessId(processId, "pOProv");
					Assert.assertTrue(provisioning);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// check for the action "pONumPosFinish" finished in success
		boolean portOutProvisioning = FranceProjectSpecific.portOutProvisioningIsDone(processId);
		Assert.assertTrue(portOutProvisioning);

		// check for the porting status
		boolean portOutFinish = FranceProjectSpecific.processPortOutFinishIsDone(processId);
		Assert.assertTrue(portOutFinish);
		Reporter.log(String.format("The customer with msisdn %s is ported out", msisdn));
	}
}
