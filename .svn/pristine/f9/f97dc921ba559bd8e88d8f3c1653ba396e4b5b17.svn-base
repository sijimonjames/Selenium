package com.acneuro.test.automation.libraries;

import java.io.File;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Reporter;

public class UKProjectSpecific extends UKConfigLib {

	public static void verifyTitleOfPage(String expectedTitle) {
		Assert.assertEquals(expectedTitle, driver.getTitle());
		if (driver.getTitle().equals(expectedTitle)) {
			Reporter.log("MyJOi Page '" + expectedTitle + "' is as expected", true);
		} else {
			Reporter.log("FAIL: My Joi Page " + expectedTitle + " is NOT as expected", true);
		}
	}

	// This is a generic method to verify a text present in the page
	public static String getAndVerifyText(String identifier) {
		String Text = driver.findElement(By.xpath(identifier)).getText();
		return Text;
	}

	public static void scrollDownToView(WebElement element) {
		try {
			JavascriptExecutor jse = (JavascriptExecutor) driver;
			jse.executeScript("arguments[0].scrollIntoView();", element);
			Thread.sleep(500);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void takeScreenShot(String File_Location) {
		try {
			File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
			Thread.sleep(4000);
			FileUtils.copyFile(scrFile, new File(File_Location));// "C:/testing/workspace/Screenshots/mvno/screenshot.png"
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void order_creation_page() {
		// Click on 'Order' button
		driver.findElement(By.xpath("//a [text()='ORDER']")).click();
	}

	public static void Login_creation_page() {
		// Click on 'Login' button
		driver.findElement(By.xpath("//a [text()='LOGIN']")).click();
	}

	public static void JOi_LIBERTY_creation_page() {
		// Click on 'Joi Liberty' button
		driver.findElement(By.xpath("//a [text()='JOi LIBERTY']")).click();
	}

	public static void Joi_Liberty_price_plan() throws InterruptedException {
		// check the radio button 'Joi Liberty'
		driver.findElement(By.xpath("//div[2]/label[1]/p[1]/b")).click();
		Thread.sleep(500);
	}

	public static void Our_Offer_add_to_basket() {
		// work for all 'Add To Basket' cases
		boolean enable = driver.findElement(By.cssSelector("input[value='ADD TO BASKET']")).isEnabled();
		System.out.println(enable);
		if (enable == true) {
			driver.findElement(By.cssSelector("input[value='ADD TO BASKET']")).click();
		}
	}

	public static void addToBasketWithoutPorting() {
		// work for all 'Add To Basket' cases

		WebElement element = driver.findElement(By.xpath("//div/input[5]"));

		UKProjectSpecific.scrollDownToView(element);
		element.click();
	}

	public static void Check_Out_Order() {
		// Order check out button click
		driver.findElement(By.xpath("//div/article/section/div[2]/a")).click();
	}

	public static void createUkCustomerAccount() {
		// String configFile = Constant.DEFAULT_TESTDATA_LOCATION + "/" +
		// Constant.configFileName;
		// String Email_ID = Generic.getCellValue(configFile, "Email_ids", 1,
		// 4);
		String uniqueEmailId = uniqueEmailIdForUkCustomer();
		WebElement emailAddress = driver.findElement(By.name("email-fieldset__email"));
		emailAddress.sendKeys(uniqueEmailId);
		scrollDownToView(emailAddress);
		driver.findElement(By.name("email-fieldset__confirm-email")).sendKeys(uniqueEmailId);
		driver.findElement(By.name("password-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
		driver.findElement(By.name("password-fieldset__confirm-password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
		driver.findElement(By.xpath("//a [text()='CONTINUE']")).click();
	}

	public static void customerDetails(String salutation, String First_Name, String Middle_Name, String Last_Name,
			String DOB, String Phone) {
		// drop down selection
		try {
			WebElement ddList = driver.findElement(By.xpath("//div[2]/fieldset[1]/div/select"));
			Select s = new Select(ddList);
			s.selectByValue(salutation);
			// First name
			driver.findElement(By.name("personal-details-fieldset__first-name")).sendKeys(First_Name);
			driver.findElement(By.name("personal-details-fieldset__prefix")).sendKeys(Middle_Name);
			driver.findElement(By.name("personal-details-fieldset__last-name")).sendKeys(Last_Name);
			// DOB field need a click before send the value

			WebElement dateOfBirth = driver.findElement(By.name("personal-details-fieldset__date-of-birth"));
			dateOfBirth.click();
			Thread.sleep(1000);
			driver.findElement(By.name("personal-details-fieldset__date-of-birth")).sendKeys(DOB);
			Thread.sleep(1000);
			driver.findElement(By.name("personal-details-fieldset__phone-number")).sendKeys(Phone);
			scrollDownToView(dateOfBirth);
			// String checkDobFieldIsEmpy = dateOfBirth.getText();
			// System.out.println(checkDobFieldIsEmpy);
			//
			// if (checkDobFieldIsEmpy.isEmpty()) {
			// driver.findElement(By.name("personal-details-fieldset__date-of-birth")).sendKeys(DOB);
			// }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void contactAndBillingAdress(String zipcode, String street, String Address) {
		// post code
		driver.findElement(By.name("addval__zip")).sendKeys(zipcode);
		// Street
		driver.findElement(By.name("addval__street")).sendKeys(street);
		// Click
		WebElement addressValidationButton = driver
				.findElement(By.cssSelector("input[class='addvalValidateButton call-to-action button']"));
		addressValidationButton.click();
		// List of Addresses
		WebElement addressList = driver.findElement(By.xpath("//div[2]/fieldset[2]/div/select"));
		Select select = new Select(addressList);
		select.selectByVisibleText(Address);
		UKProjectSpecific.scrollDownToView(addressValidationButton);

		// Click on create account button by scroll down the page to make the
		// element into view
		try {
			WebElement createAccount = driver
					.findElement(By.xpath("//section/section/div/article/form/section[1]/input"));

			Thread.sleep(500);

			// UKProjectSpecific.scrollDownToView(createAccount);
			createAccount.click();
			Thread.sleep(15000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void continueFromAccountCreationPage() {
		// post code
		WebElement welcomeMessage = driver.findElement(By.xpath("//section/div/article/h1"));
		scrollDownToView(welcomeMessage);

		driver.findElement(By.cssSelector("a[href='/uk/our-offer/order']")).click();
	}

	public static void continue_step_3() {
		// Click to next page from step 3
		WebElement continueStep3 = driver.findElement(By.xpath("//form/dl/dd[2]/div/section/a[1]"));
		UKProjectSpecific.scrollDownToView(continueStep3);
		continueStep3.click();
	}

	public static void Bank_details(String Bank_Name, String Account_Number, String Sort_Code){
		try{
		WebElement element =driver.findElement(By.name("bank-account__name-of-bank"));
		element.sendKeys(Bank_Name);
		driver.findElement(By.name("bank-account__account-number")).sendKeys(Account_Number);
		driver.findElement(By.name("bank-account__sort-code")).sendKeys(Sort_Code);
		scrollDownToView(element);
		driver.findElement(By.xpath("//dl/dd[3]/div/fieldset[2]/label/input")).click();
		Thread.sleep(1000);
		driver.findElement(By.xpath("//dl/dd[3]/div/section/a[1]")).click();
	}catch (Exception e){
		e.printStackTrace();
	}
	}

	public static void orderSummaryPageForNewCustomer(String Rep_ID) {
		try {
			driver.findElement(By.xpath("//article/form/dl/dd[4]/div/fieldset[9]/label")).click();
			driver.findElement(By.xpath("//article/form/dl/dd[4]/div/fieldset[10]/label")).click();
			driver.findElement(By.xpath("//article/form/dl/dd[4]/div/fieldset[11]/label")).click();
			WebElement finalPage = driver.findElement(By.name("teamid__teamid"));
			finalPage.sendKeys(Rep_ID);
			scrollDownToView(finalPage);
			driver.findElement(By.xpath("//div/article/form/section/input")).click();
			// Explicit wait until Datacash external page opens up
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void orderSummaryPageForExitstingCustomer(String Rep_ID) {
		try {

			driver.findElement(By.xpath("id('panel3')/fieldset[8]/label")).click();
			Thread.sleep(500);
			driver.findElement(By.xpath("id('panel3')/fieldset[9]/label")).click();
			driver.findElement(By.xpath("id('panel3')/fieldset[10]/label")).click();
			driver.findElement(By.name("teamid__teamid")).sendKeys(Rep_ID);
			WebElement submitOrderButton = driver.findElement(By.xpath("//div/article/form/section/input"));
			UKProjectSpecific.scrollDownToView(submitOrderButton);
			submitOrderButton.click();
			// Explicit wait until Datacash external page opens up
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Automating datacash page
	public static void Payment_Datacash(String Card_Type, String Card_Number, String Expiry_Year, String CVV) {

		// Selecting the required Credit card Visa, master card etc..
		try {
			WebElement cardList = driver.findElement(By.xpath("//tbody/tr[4]/td/select"));
			Select s = new Select(cardList);
			s.selectByVisibleText(Card_Type);

			// Card Number
			driver.findElement(By.name("card_number")).sendKeys(Card_Number);

			// Expiry month and year, Month retain same and year need to change
			// to a
			// future year
			WebElement yearList = driver.findElement(By.name("exp_year"));
			Select s1 = new Select(yearList);
			s1.selectByVisibleText(Expiry_Year);
			driver.findElement(By.name("cv2_number")).sendKeys(CVV);
			driver.findElement(By.xpath("/html/body/form/div/input")).click();
			Thread.sleep(7000); // New page loading
			// Authentication
			driver.findElement(By.xpath("//table/tbody/tr[1]/td[1]/input")).click();
			Thread.sleep(10000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Resolving tasks API call, future should be done from cuET-Reload
	public static void resolvingTasksSignal(String processId, String taskId) {
		String resolvingTasksApiBody = RestApiAutomation.resolvingTasksApiBody(processId, taskId);
		System.err.println(resolvingTasksApiBody);
		RestApiAutomation.httpPostTest(Constant.cue_Update, resolvingTasksApiBody);
	}

	// Shipping API call
	public static void workerTriggerForBillingUpdate(String workerUrl) {

		try {
			driver = new FirefoxDriver();
			// implicit wait to complete each browser action
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(workerUrl);
			// to maximize the opening browser window
			driver.manage().window().maximize();
			// Trigger worker 'QueryOrderStatusJob'
			WebElement workerQueryOrderStatusJob = driver.findElement(By.xpath("//div[3]/div/div[3]/div[2]/a[1]"));
			UKProjectSpecific.scrollDownToView(workerQueryOrderStatusJob);
			workerQueryOrderStatusJob.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			// Trigger worker 'QuerySubscriptionJob'
			WebElement workerQuerySubscriptionJob = driver
					.findElement(By.xpath("//div[2]/div[3]/div/div[16]/div[2]/a[1]"));
			UKProjectSpecific.scrollDownToView(workerQuerySubscriptionJob);
			workerQuerySubscriptionJob.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			driver.quit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static boolean checkIfActionExists(String orderID, String actionName) {
		try {
			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, actionName));
				while (resultSet.next()) {
					return true;
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public static boolean processUpfrontPayment(String orderID) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "ofUpfrontPaymentWait"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");

					if ("ofUpfrontPaymentWait".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("ofUpfrontPaymentWait".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("ofUpfrontPaymentWait".equals(actionName) && !"FIN".equals(status)) {
						UKProjectSpecific.workerTriggerForBillingUpdate(Constant.billsrvWorkerUrl);
					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// Shipping API call

	public static boolean processShipWait(String orderID) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "mbShipWaiting"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");
					System.out.println("shipping process id: " + processId);

					if ("mbShipWaiting".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("mbShipWaiting".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("mbShipWaiting".equals(actionName) && !"FIN".equals(status)) {
						String ShippingApiBody = RestApiAutomation.shippingSignalApiBody(processId);
						RestApiAutomation.httpPostTest(Constant.cue_Update, ShippingApiBody);
					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static void LoginToUKMyJoi() {
		String configFile = Constant.DEFAULT_TESTDATA_LOCATION + "/" + Constant.configFileName;
		String browserType = Generic.getCellValue(configFile, "Browser_selection", 0, 1);
		String url = Generic.getCellValue(configFile, "Browser_selection", 1, 1);

		if (browserType.equals("Internet Explorer")) {
			System.setProperty("webdriver.ie.driver", Constant.IE_Driver_Path);
			driver = new InternetExplorerDriver();
			Reporter.log("Opening Internet Explorer", true);
		} else if (browserType.equals("Google Chrome")) {
			System.setProperty("webdriver.chrome.driver", Constant.Chrome_Driver_Path);
			driver = new ChromeDriver();
			Reporter.log("Opening Google Chrome", true);
		} else {
			driver = new FirefoxDriver();
			Reporter.log("Opening Mozilla FireFox", true);
		}
		// get the URL of the page JOi UK/FR_FR/FR_EN
		driver.get(url);
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		// to maximize the opening browser window
		driver.manage().window().maximize();

		try {
			// String emailId = Generic.getCellValue(configFile, "Email_ids", 4,
			// 4);
			String emailId = existingEmailIdForUkCustomer();
			driver.findElement(By.xpath("//section[1]/div/nav/ul/li[3]/a")).click();
			// login with existing customer details
			driver.findElement(By.name("login-fieldset__email")).sendKeys(emailId);
			driver.findElement(By.name("login-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
			Thread.sleep(400);
			driver.findElement(By.cssSelector("input[value = 'LOGIN']")).click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void ActivateSimAfterLogin() {
		try {
			
			WebElement elementToScroll = driver.findElement(By.xpath("//section[1]/div/article/p/strong"));
			scrollDownToView(elementToScroll);
			driver.findElement(By.cssSelector("a[href*= 'NC_MV_SUB_ACTV_REM1']")).click();
			Thread.sleep(2000);
			WebElement activateSim = driver.findElement(By.cssSelector("input[name='iccid']"));
			activateSim.sendKeys(Constant.ICCID_1);
			UKProjectSpecific.scrollDownToView(activateSim);
			driver.findElement(By.cssSelector("input[value = 'ACTIVATE YOUR SIM']")).click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			driver.quit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void provisioningDuringActivationOfOrders(String orderId) {
		String processId = "";
		UKProjectSpecific.checkIfActionExists(orderId, "mbProvisionWait");

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionWait"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String result = resultSet.getString("RESULT");

				if ("mbProvisionWait".equals(actionName) && "RETRY".equals(result)) {
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							QueryUtils.queryUpdateActionInstanceScheduledTime(processId, "mbProvisionStart"));
					Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME); // 2mins
																	// sleep
				} else
					break;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionWait"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String result = resultSet.getString("RESULT");
				processId = resultSet.getString("PRI_ID");
				if ("mbProvisionWait".equals(actionName) && "ERROR".equals(result)) {
					// update action result=null, status = 'WAI', owner=null
					OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateOrderLines(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateCinProducts(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateOrdOrders(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							QueryUtils.queryUpdateActionInstances(processId, "mbProvisionWait"));
					OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateProcessInstances(processId));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			System.out.println("starting provisioning");
			String provisioningSuccess = RestApiAutomation.provisioningSuccessSignalApiBody(processId);
			RestApiAutomation.httpPostTest(Constant.cue_Update, provisioningSuccess);
			System.out.println("provisioning is completed, now the customer should be active");

			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void selectNeworderFromOurOffer() {
		Actions mouseAction = new Actions(driver);
		WebElement ourOffer = driver.findElement(By.xpath("//ul/li[2]/span"));
		WebElement moveToJOiLiberty = driver.findElement(By.xpath("//ul/li/ul/li[2]/a"));
		mouseAction.moveToElement(ourOffer).moveToElement(moveToJOiLiberty).click().build().perform();
		driver.findElement(By.xpath("//div/div[2]/div/a[1]")).click();
	}

	public static boolean cancellationOfIncompleteOrderInShipWaitingStage(String orderID, String CancellationApiBody) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "mbShipWaiting"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");

					if ("mbShipWaiting".equals(actionName) && "WAI".equals(status)) {
						RestApiAutomation.httpPostTest(Constant.cue_Execute, CancellationApiBody);
						return true;
					}
					if ("mbShipWaiting".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static void terminateBillingDuringOrderCancellation(String orderId) {
		UKProjectSpecific.checkIfActionExists(orderId, "orTerminateBilling");

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "orTerminateBilling"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				// String result = resultSet.getString("RESULT");
				String processId = resultSet.getString("PRI_ID");
				System.err.println(processId);

				if ("orTerminateBilling".equals(actionName) && "SCH".equals(status)) {
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							QueryUtils.queryUpdateActionInstanceScheduledTime(processId, "orTerminateBilling"));
					Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME); // 2mins
																	// sleep
				} else
					break;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// This is just a check, No specific action is needed
	public static boolean checkForCancellationOfOrderIsDone(String orderId) {
		UKProjectSpecific.checkIfActionExists(orderId, "orCancelCRM");

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "orCancelCRM"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				String result = resultSet.getString("RESULT");

				if ("orCancelCRM".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
					return true;
				}
				if ("orCancelCRM".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
					return false;
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static String uniqueEmailIdForUkCustomer() {
		// Taking a unique id from existing email id
		String latestEmailId = existingEmailIdForUkCustomer();
		String existingId = latestEmailId.split("_")[2].split("@")[0];
		String uniqueId = String.valueOf(((Integer.parseInt(existingId)) + 1));
		// Creating a new Email ID
		String newUniqueEmailID = "MVNO_Automation_" + uniqueId + "@test.uk";
		System.out.println(newUniqueEmailID);
		return newUniqueEmailID;
	}

	public static String existingEmailIdForUkCustomer() {
		String lastCustomerNumber = "";
		String latestEmailId = "";
		ResultSet customerNumber = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryMaxCustomerNumberUKCustomer());
		try {
			while (customerNumber.next()) {
				lastCustomerNumber = customerNumber.getString("MAX_CUSTOMER_NUMBER");
				System.out.println(lastCustomerNumber);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet emailId = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryLatestExistingCustomerEmailId(lastCustomerNumber));
		try {
			while (emailId.next()) {
				latestEmailId = emailId.getString("EMAIL_ADDRESS");
				System.out.println(latestEmailId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return latestEmailId;
	}
}