package com.acneuro.test.automation.uk_workflow_tests;

import java.sql.ResultSet;

import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Test;

import com.acneuro.test.automation.libraries.Constant;
import com.acneuro.test.automation.libraries.OracleJdbcConnection;
import com.acneuro.test.automation.libraries.QueryUtils;
import com.acneuro.test.automation.libraries.UKConfigLib;
import com.acneuro.test.automation.libraries.UKProjectSpecific;

public class TC_5_UKPortOutTests {


	
	public static String orderCreationForExistingCustomer() {
		// Checking the database for status="RESOLVING_TASKS"(sometimes "NEW")
		// change this always to "RESOLVING_TASKS"

		UKProjectSpecific.LoginToUKMyJoiWithLatestEmailID();
		UKProjectSpecific.selectNeworderFromOurOffer();
		UKProjectSpecific.Our_Offer_add_to_basket();
		UKProjectSpecific.addToBasketWithoutPorting();
		UKProjectSpecific.Check_Out_Order();
		UKProjectSpecific.continue_step_3();
		UKProjectSpecific.orderSummaryPageForExitstingCustomer("99999");
		UKProjectSpecific.Payment_Datacash(Constant.Card_Type1, Constant.Type1_CC_number, "2018",
				Constant.Type1_CC_CVV);
		UKProjectSpecific.verifyTitleOfPage("Your JOi Order Confirmation");
		UKProjectSpecific.takeScreenShot("C:/testing/workspace/Screenshots/mvno/Order_Creation.png");
		String getOrderNumber = UKProjectSpecific.getAndVerifyText("//div/article/section/p[2]/strong");
		String orderNumber = getOrderNumber.substring(1);
		System.out.println("Order is created successfully!! Your Order number is: " + orderNumber);
		UKConfigLib.driver.quit();
		return orderNumber;
	}
	
	
	
	
	
	
	
	public static String activationOfNewOrder() {

		String orderId = "";
		String orderNumber = "";

		orderNumber = orderCreationForExistingCustomer();
		System.out.println(String.format("The new Oder number is %s", orderNumber));

		// if order status is 'NEW' in database change to 'RESOLVING_TASKS'

		try {
			OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateOrderStatus(orderNumber));
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.queryOrderStatus(orderNumber));
			while (resultSet.next()) {
				orderId = resultSet.getString("ID");
				System.out.println(orderId);
				System.out.println(resultSet.getString("ORD_NUMBER"));
				System.out.println(resultSet.getString("STATUS"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String taskId = ""; // Need task id to 'resolving_tasks'
		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.queryTaskId(orderId));
			while (resultSet.next()) {
				taskId = resultSet.getString("ID");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String latestPriId = "";
		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.querylatestProcessId(orderId));
			while (resultSet.next()) {
				latestPriId = resultSet.getString("max(PRI_ID)");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// RESOLVING_TASKS API signal
		try {
			UKProjectSpecific.resolvingTasksSignal(latestPriId, taskId);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// here we check if upfront payment action created
		boolean checkActionUpfrontPayment = UKProjectSpecific.checkIfActionExistsForOrder(orderId, "ofUpfrontPaymentWait");
		Assert.assertTrue(checkActionUpfrontPayment);

		// here we check if upfront payment is finished successfully
		boolean upfrontPaymentActionIsDone = UKProjectSpecific.processUpfrontPayment(orderId);
		Assert.assertTrue(upfrontPaymentActionIsDone);

		// here we check if shipping signal action is created
		boolean checkActionmbShipWaiting = UKProjectSpecific.checkIfActionExistsForOrder(orderId, "mbShipWaiting");
		Assert.assertTrue(checkActionmbShipWaiting);

		// here we check if upfront payment is finished successfully
		boolean mbShipWaitingIsDone = UKProjectSpecific.processShipWait(orderId, "mbShipWaiting");
		Assert.assertTrue(mbShipWaitingIsDone);

		// here we check if SIM activation action is created
		boolean checkActionmbSimActivation = UKProjectSpecific.checkIfActionExistsForOrder(orderId, "mbSimActivation");
		Assert.assertTrue(checkActionmbSimActivation);

		// If SIM activation action present activate the SIM in MYJOi
		UKProjectSpecific.LoginToUKMyJoiWithLatestEmailID();
		UKProjectSpecific.ActivateSimAfterLogin();
		Reporter.log("SIM activation is done using MyJOi", true);

		boolean checkActionmbProvisionWait = UKProjectSpecific.checkIfActionExistsForOrder(orderId, "mbProvisionWait");
		Assert.assertTrue(checkActionmbProvisionWait);

		UKProjectSpecific.provisioningDuringActivationOfOrders(orderId);

		return orderId;

	}
	
	
	
	@Test(priority = 1)
	public static void portOutOfUKCustomer() {
		
		String orderID = "";

		// GET THE ACTUAL ORDER ID BY ACTIVATING THE ORDER
		orderID = activationOfNewOrder();
		UKProjectSpecific.LoginToUKMyJoiWithLatestEmailID();
		UKProjectSpecific.ukPortOutFromManageSettings();

		// AFTER SUBMIT A PROCESS 'pONumPos' WILL BE INITIATED, CHECK THAT
		// REFERENCE ID IN NUMPOS IS PROCESS ID IN CUES

		boolean numposStart = UKProjectSpecific.checkIfActionExistsForOrder(orderID, "pONumPos");
		Assert.assertTrue(numposStart);

		// SEND A REST API REQUEST TO START THE PORT-OUT
		UKProjectSpecific.ukNumberPortingFinish(orderID);

		// THIS SHOULD BE UPDATED AND TERMINATE THE SUBSCRIPTION
		// Just check for 'pONumPosFinish'
		boolean numposFinish = UKProjectSpecific.checkIfActionExistsForOrder(orderID, "pONumPosFinish");
		Assert.assertTrue(numposFinish);
		// CCHECK FOR 'pONumPosFinish' IS FINISHED IN SUCCESS
		boolean numposSuccess = UKProjectSpecific.checkForPortOutIsDone(orderID);
		Assert.assertTrue(numposSuccess);
	}

}