package mvno_project_library;

import static com.acneuro.test.automation.db_connection_libraries.DBUtils.*;
import static mvno_project_library.MVNOProjectSpecific.*;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Reporter;

import com.acneuro.test.automation.db_connection_libraries.OracleJdbcConnection;
import com.acneuro.test.automation.libraries.ConfigLib;
import com.acneuro.test.automation.libraries.Constant;
import com.acneuro.test.automation.libraries.Generic;
import com.acneuro.test.automation.libraries.RestApiAutomation;
import com.acneuro.test.automation.libraries.RioGenerator;

public class FranceProjectSpecific extends ConfigLib {

	public static void orderCreationPageInFrench() {
		// Click on 'Order' button
		driver.findElement(By.xpath("//a [text()='COMMANDEZ']")).click();
	}

	public static void Login_creation_page() {
		// Click on 'Login' button
		driver.findElement(By.xpath("//a [text()='LOGIN']")).click();
	}

	public static void JOi_LIBERTY_creation_page() {
		// Click on 'Joi Liberty' button
		driver.findElement(By.xpath("//a [text()='JOi LIBERTY']")).click();
	}

	public static void joiLibertyPricePlan() {
		// check the radio button 'Joi Liberty'
		try {
			driver.findElement(By.xpath("//div[2]/label[1]/p[1]/b")).click();
			Thread.sleep(500);
			// verification of connection fee and total amount to be paid
			// String connFee =
			// FranceProjectSpecific.getAndVerifyText("//*[@id='receipt']/ul/li[2]/ul/li[3]/span");
			// String connectionFee = connFee.replaceAll("\\s+", " ").trim();
			// System.out.println("Connection Fee: " + connectionFee);
			// Assert.assertEquals(connectionFee, Constant.FR_CONNECTION_FEE);
			// String amountToBePaid =
			// FranceProjectSpecific.getAndVerifyText("//*[@id='receipt']/ul/li[2]/div/p/span");
			// String totalAmount = amountToBePaid.replaceAll("\\s+", "
			// ").trim();
			// System.out.println("Total amount to be paid for Liberty Plan: " +
			// totalAmount);
			// Assert.assertEquals(totalAmount,
			// Constant.FR_LIBERTY_TOTAL_PRICE);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void joiEgalittePricePlan() {
		// check the radio button 'Joi Liberty'
		try {
			driver.findElement(By.xpath("//div[2]/label[2]/p[1]/b")).click();
			Thread.sleep(500);
			// verification of connection fee and total amount to be paid
			String connFeeEgalitte = getAndVerifyText("//*[@id='receipt']/ul/li[2]/ul/li[3]/span");
			String connectionFeeEgalitte = connFeeEgalitte.replaceAll("\\s+", " ").trim();
			System.out.println("connection fee: " + connectionFeeEgalitte);
			Assert.assertEquals(connectionFeeEgalitte, Constant.FR_CONNECTION_FEE);

			String tolalAmountEgalitte = getAndVerifyText("//*[@id='receipt']/ul/li[2]/div/p/span");
			String totalAmount = tolalAmountEgalitte.replaceAll("\\s+", " ").trim();
			System.out.println("Total Amount For Egalitte Plan: " + totalAmount);
			Assert.assertEquals(totalAmount, Constant.FR_EGALITTE_TOTAL_PRICE);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void combiSimTypeSelectionForLiberty() {
		// Select "Combi"
		WebElement combiSim = driver.findElement(By.xpath("//*[@id='FRMV1504OF60']/section/div[3]/label[1]/p/b"));
		scrollDownToView(combiSim);
		combiSim.click();
	}

	public static void combiSimTypeSelectionForEgalitte() {
		// Select "Combi"
		try {
			WebElement combiSimLocation = driver
					.findElement(By.xpath("//*[@id='FRMV1509OF66']/section/div[3]/label[1]/p/b"));
			scrollDownToView(combiSimLocation);
			combiSimLocation.click();
			Thread.sleep(500);

			// String simFee =
			// FranceProjectSpecific.getAndVerifyText("//*[@id='receipt']/ul/li[2]/ul/li[4]/span");
			// String simFeeEgalitte = simFee.replaceAll("\\s+", " ").trim();
			// System.out.println("SIM fee: " + simFeeEgalitte);
			// Assert.assertEquals(simFeeEgalitte, Constant.FR_SIM_FEE);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void nanoSimTypeSelection() {
		// Select "Nano"
		try {
			WebElement nanoSim = driver.findElement(By.xpath("//div[1]/section/div[3]/label[2]/p/b"));
			scrollDownToView(nanoSim);
			nanoSim.click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void ourOfferPageAddToBasketButton() {
		// work for all 'Add To Basket' cases
		boolean enable = driver.findElement(By.cssSelector("input[value='ADD TO BASKET']")).isEnabled();
		System.out.println(enable);
		if (enable == true) {
			driver.findElement(By.cssSelector("input[value='ADD TO BASKET']")).click();
		}
	}

	public static void add_to_basket_without_porting() {
		// work for all 'Add To Basket' cases

		WebElement element = driver.findElement(By.xpath("//div/input[5]"));

		scrollDownToView(element);
		element.click();
	}

	public static void addToBasketWithPortin() {

		// Click the radio Button for Port IN

		WebElement element = driver.findElement(By.cssSelector("label[class='select-bar checkbox']"));
		element.click();
		scrollDownToView(element);
		// Click on Add to Basket Button
		driver.findElement(By.xpath("//div/input[5]")).click();
	}

	public static void checkOutOrder() {
		// Order check out button click
		driver.findElement(By.xpath("//div/article/section/div[2]/a")).click();
	}

	public static void FranceCustomerAccountCreation() {
		String Email_ID = uniqueEmailIdForFRCustomer();
		driver.findElement(By.name("email-fieldset__email")).sendKeys(Email_ID);
		driver.findElement(By.name("email-fieldset__confirm-email")).sendKeys(Email_ID);
		driver.findElement(By.name("password-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
		driver.findElement(By.name("password-fieldset__confirm-password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
		driver.findElement(By.xpath("//a [text()='CONTINUE']")).click();
	}

	public static void Customer_details(String salutation, String First_Name, String Middle_Name, String Last_Name,
			String DOB, String Phone) {
		// drop down selection
		WebElement ddList = driver.findElement(By.xpath("//div[2]/fieldset[1]/div/select"));
		Select s = new Select(ddList);
		s.selectByValue(salutation);
		// First name
		driver.findElement(By.name("personal-details-fieldset__first-name")).sendKeys(First_Name);
		driver.findElement(By.name("personal-details-fieldset__prefix")).sendKeys(Middle_Name);
		driver.findElement(By.name("personal-details-fieldset__last-name")).sendKeys(Last_Name);
		// DOB field need a click before send the value
		driver.findElement(By.name("personal-details-fieldset__date-of-birth")).click();
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		driver.findElement(By.name("personal-details-fieldset__date-of-birth")).sendKeys(DOB);
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		driver.findElement(By.name("personal-details-fieldset__phone-number")).sendKeys(Phone);

	}

	public static void uploadCustomerIdCopy() {
		// Select and upload an Id copy of the France customer
		// This is only for France customer
		try {
			// String idFranceFilePath = System.getProperty("user.dir") +
			// Constant.DEFAULT_TESTDATA_LOCATION + "/" +
			// Constant.FranceIdFileName;
			// Click on the upload file button
			WebElement fileUploadButton = driver.findElement(By.cssSelector("input[value = 'UPLOAD FILE']"));
			fileUploadButton.click();
			scrollDownToView(fileUploadButton);
			// Handle the hidden division pop-up
			WebElement fileUpload = driver.findElement(By.xpath("//input[@type='file']"));
			Thread.sleep(1000);
			fileUpload.sendKeys(Constant.FranceIdFileName);
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			System.out.println("ID is uploaded");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void contactAndBillingAdress(String zipcode, String street, String addressValue) {

		try {
			// post code
			driver.findElement(By.name("addval__zip")).sendKeys(zipcode);
			// Street
			driver.findElement(By.name("addval__street")).sendKeys(street);
			// Click to search address
			WebElement element = driver
					.findElement(By.cssSelector("input[class='addvalValidateButton call-to-action button']"));
			element.click();
			// List of Addresses
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			WebElement addressList = driver.findElement(By.xpath("//div[2]/fieldset[2]/div/select"));
			Select select = new Select(addressList);

			select.selectByValue(addressValue);

		} catch (Exception e) {
			e.printStackTrace();
		}
		// Click on create account button by scroll down the page to make the
		// element into view
		try {
			WebElement createAccount = driver.findElement(By.xpath("//div/article/form/section[1]/input"));
			System.out.println(createAccount.isEnabled());
			Thread.sleep(500);
			scrollDownToView(createAccount);
			createAccount.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Need to scrap this
	public static void updateEmailIInExcelSheet() {
		// get the customer Email ID and update in Excel sheet in 'Existing
		// Customers' section
		String configFile = Constant.DEFAULT_TESTDATA_LOCATION + "/" + Constant.configFileName;
		String existingCustomer = Generic.getCellValue(configFile, "Email_ids", 2, 4);
		Generic.updateCellValue(configFile, "Email_ids", 5, 4, existingCustomer);
		// update the email ID to unique value for next customer creation
		String count = Generic.getCellValue(configFile, "Email_ids", 2, 2);
		System.out.println(count);
		int count1 = Integer.parseInt(count);
		int number = count1 + 1;
		String cellValue1 = String.valueOf(number);
		Generic.updateCellValue(configFile, "Email_ids", 2, 2, cellValue1);
		String uniqueEmailIdForNextTest = "MVNO_Automation_" + cellValue1 + "@test.fr";
		Generic.updateCellValue(configFile, "Email_ids", 2, 4, uniqueEmailIdForNextTest);
	}

	public static void continueButtonAfterAccountCreation() {
		// post code

		try {
			WebElement continueButton = driver.findElement(By.cssSelector("a[href='/our-offer/order']"));
			scrollDownToView(continueButton);
			continueButton.click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void continueToStep3WithoutPorting() {
		// Click to next page from step 3
		WebElement continueStep3 = driver.findElement(By.xpath("//form/dl/dd[2]/div/section/a[1]"));
		scrollDownToView(continueStep3);
		continueStep3.click();
	}

	public static void continueToStep3WithPortin() {
		// Click to next page from step 3

		try {
			String uniquePortinNumber = franceUniquePortInNumber();

			Thread.sleep(500);

			System.out.println("New Portin number: " + uniquePortinNumber + "");
			String rioCode = RioGenerator.generateRio(Constant.NUMPOS_OP_CODE_1,
					Constant.NUMPOS_DEFAULT_RIO_CODE.substring(2, 3), Constant.NUMPOS_DEFAULT_RIO_CODE.substring(3, 9),
					uniquePortinNumber);
			Reporter.log("RIO Code: " + rioCode);
			Thread.sleep(500);
			driver.findElement(By.cssSelector("input[name = 'number-porting__currentNumber']"))
					.sendKeys(uniquePortinNumber);
			driver.findElement(By.cssSelector("input[name = 'number-porting__riocode']")).sendKeys(rioCode);
			driver.findElement(By.cssSelector("label[class = 'select-bar checkbox cancel-current-subscription']"))
					.click();
			WebElement continueStep3 = driver.findElement(By.xpath("//form/dl/dd[2]/div/section/a[1]"));
			scrollDownToView(continueStep3);
			continueStep3.click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void franceBankDetailsAndClickToContinue(String accountNumberInIban, String BIC) {
		driver.findElement(By.name("bank-account__iban")).sendKeys(accountNumberInIban);
		driver.findElement(By.name("bank-account__bic")).sendKeys(BIC);

		WebElement continueToNext = driver.findElement(By.xpath("//dl/dd[3]/div/section/a[1]"));
		scrollDownToView(continueToNext);
		continueToNext.click();

	}

	public static void orderSummaryPageForNewCustomer(String Rep_ID) {
		try {

			WebElement elementToScroll = driver
					.findElement(By.xpath("//*[@id='panel3']/fieldset[6]/div/section/div/div[1]/p"));
			scrollDownToView(elementToScroll);

			WebElement MarkAs = driver.findElement(By.xpath("//*[@id='panel3']/fieldset[9]/label"));
			int Width = MarkAs.getSize().width;
			int Height = MarkAs.getSize().height;
			int MyX = (Width * 95) / 100;// spot to click is at 95% of the width
			int MyY = Height / 2;// anywhere above Height/2 works
			Actions Actions = new Actions(driver);
			Actions.moveToElement(MarkAs, MyX, MyY);
			Thread.sleep(500);
			Actions.click().build().perform();

			driver.findElement(By.xpath("//article/form/dl/dd[4]/div/fieldset[10]/label")).click();
			driver.findElement(By.xpath("//article/form/dl/dd[4]/div/fieldset[11]/label")).click();
			driver.findElement(By.name("teamid__teamid")).sendKeys(Rep_ID);
			WebElement finalPage = driver.findElement(By.xpath("//div/article/form/section/input"));
			scrollDownToView(finalPage);
			finalPage.click();
			// Explicit wait until Datacash external page opens up
			Thread.sleep(10000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void orderSummaryPageForExitstingCustomer(String Rep_ID) {
		try {

			WebElement elementToScroll = driver.findElement(By.xpath("//*[@id='panel3']/fieldset[4]/div/ul/li[2]/h6"));
			scrollDownToView(elementToScroll);

			WebElement MarkAs = driver.findElement(By.xpath("id('panel3')/fieldset[8]/label"));
			int Width = MarkAs.getSize().width;
			int Height = MarkAs.getSize().height;
			int MyX = (Width * 95) / 100;// spot to click is at 95% of the width
			int MyY = Height / 2;// anywhere above Height/2 works
			Actions Actions = new Actions(driver);
			Actions.moveToElement(MarkAs, MyX, MyY);
			Actions.click().build().perform();

			Thread.sleep(500);

			driver.findElement(By.xpath("id('panel3')/fieldset[9]/label")).click();
			driver.findElement(By.xpath("id('panel3')/fieldset[10]/label")).click();
			driver.findElement(By.name("teamid__teamid")).sendKeys(Rep_ID);
			WebElement submitOrderButton = driver.findElement(By.xpath("//div/article/form/section/input"));
			scrollDownToView(submitOrderButton);
			submitOrderButton.click();
			// Explicit wait until Datacash external page opens up
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Automating datacash page
	public static void Payment_Datacash(String Card_Type, String Card_Number, String Expiry_Year, String CVV) {
		try {
			// Selecting the required Credit card Visa, master card etc..
			WebElement cardList = driver.findElement(By.xpath("//tbody/tr[4]/td/select"));
			Select s = new Select(cardList);
			s.selectByVisibleText(Card_Type);

			// Card Number
			driver.findElement(By.name("card_number")).sendKeys(Card_Number);

			// Expiry mmyy, Month retain same and year need to be in future
			WebElement yearList = driver.findElement(By.name("exp_year"));
			Select s1 = new Select(yearList);
			s1.selectByVisibleText(Expiry_Year);
			driver.findElement(By.name("cv2_number")).sendKeys(CVV);
			driver.findElement(By.xpath("/html/body/form/div/input")).click();
			Thread.sleep(7000); // New page loading
			// Authentication
			driver.findElement(By.xpath("//table/tbody/tr[1]/td[1]/input")).click();
			Thread.sleep(10000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Resolving tasks API call

	public static void resolvingTasksSignal(String processId, String taskId) {
		String resolvingTasksApiBody = RestApiAutomation.resolvingTasksApiBody(processId, taskId);
		RestApiAutomation.httpPostTest(Constant.cue_Update, resolvingTasksApiBody);
	}

	// Shipping API call
	public static void workerTriggerForBillingUpdate(String workerUrl) {
		try {
			driver = new FirefoxDriver();
			// implicit wait to complete each browser action
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(workerUrl);
			// to maximize the opening browser window
			driver.manage().window().maximize();
			// Trigger worker 'QueryOrderStatusJob'
			WebElement workerQueryOrderStatusJob = driver.findElement(By.xpath("//div[3]/div/div[3]/div[2]/a[1]"));
			scrollDownToView(workerQueryOrderStatusJob);
			workerQueryOrderStatusJob.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			// Trigger worker 'QuerySubscriptionJob'
			WebElement workerQuerySubscriptionJob = driver
					.findElement(By.xpath("//div[2]/div[3]/div/div[16]/div[2]/a[1]"));
			scrollDownToView(workerQuerySubscriptionJob);
			workerQuerySubscriptionJob.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			driver.quit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static boolean checkIfActionExistsForOrder(String orderID, String actionName) {
		try {
			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection
						.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderID, actionName));
				while (resultSet.next()) {
					String Name = resultSet.getString("NAME");
					String Status = resultSet.getString("STATUS");
					if (actionName.equals(Name) && "WAI".equals(Status)) {
						System.out.println("Action is in WAI status");
						return true;
					} else if (actionName.equals(Name) && "FIN".equals(Status)) {
						System.out.println("Action is in FIN status");
						return true;
					} else if (actionName.equals(Name) && "SCH".equals(Status)) {
						System.out.println("Action is in SCH status");
						return true;
					}

				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public static boolean checkIfActionExistsWithProcessId(String processId, String actionName) {
		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection
						.crmDatabaseSelectQuery(queryActionInstanceWithProcessIdAndActionName(processId, actionName));
				while (resultSet.next()) {
					String Name = resultSet.getString("NAME");
					String Status = resultSet.getString("STATUS");
					if (actionName.equals(Name) && ("WAI".equals(Status) || "FIN".equals(Status))) {
						return true;
					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public static boolean processUpfrontPayment(String orderID) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						queryActionInstanceWithOrderIdAndActionName(orderID, "ofUpfrontPaymentWait"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");

					if ("ofUpfrontPaymentWait".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("ofUpfrontPaymentWait".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("ofUpfrontPaymentWait".equals(actionName) && !"FIN".equals(status)) {
						System.out.println(String.format("connecting billing service web interface for %d time", i));
						workerTriggerForBillingUpdate(Constant.billsrvWorkerUrl);
					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// Shipping API call

	public static boolean processShipWait(String orderID, String ShippingProcessName) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						queryActionInstanceWithOrderIdAndActionName(orderID, ShippingProcessName));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");
					System.out.println("shipping process id: " + processId);

					if (ShippingProcessName.equals("mbShipWaiting") && ShippingProcessName.equals(actionName)
							&& !"FIN".equals(status)) {
						RestApiAutomation.httpPostTest(Constant.cue_Update,
								RestApiAutomation.shippingSignalApiBody(Constant.ICCID_1, processId));
					} else if (ShippingProcessName.equals("simReplacementShipWait")
							&& ShippingProcessName.equals(actionName) && !"FIN".equals(status)) {
						RestApiAutomation.httpPostTest(Constant.cue_Update,
								RestApiAutomation.shippingSignalApiBody(Constant.ICCID_2, processId));
						Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
					}
					if (ShippingProcessName.equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if (ShippingProcessName.equals(actionName) && "ERR".equals(status)) {
						return false;
					}

				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static boolean processEligibilityCheckWaiting(String orderID) {
		String portinNumber = "";
		String rioCode = "";

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						queryActionInstanceWithOrderIdAndActionName(orderID, "mbElegibilityCheck"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");
					System.out.println("eligibility Check process id: " + processId);

					if ("mbElegibilityCheck".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("mbElegibilityCheck".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("mbElegibilityCheck".equals(actionName) && !"FIN".equals(status)) {
						String date = dateToString(new Date(), "yyyyMMdd");
						ResultSet numposResultSet = OracleJdbcConnection.numposDatabaseSelectQuery(
								queryLatestPortinNumberfromNumposDB("FR", Constant.FR_Portin_Number));
						while (numposResultSet.next()) {
							portinNumber = numposResultSet.getString("MAX_PORTING_NUMBER");
						}
						rioCode = RioGenerator.generateRio(Constant.NUMPOS_OP_CODE_1,
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(2, 3),
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(3, 9), portinNumber);

						String eligibilityApiBody = RestApiAutomation.portInEligibilityCheckNumposeResponse(date,
								portinNumber, rioCode);

						System.out.println("====" + eligibilityApiBody);

						RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, eligibilityApiBody);

					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static boolean processNumposWaiting(String orderID) {
		String portinNumber = "";
		String rioCode = "";
		String processId = "";

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						queryActionInstanceWithOrderIdAndActionName(orderID, "mbNumPosWaiting"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String result = resultSet.getString("RESULT");
					processId = resultSet.getString("PRI_ID");

					if ("mbNumPosWaiting".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
						return true;
					}
					if ("mbNumPosWaiting".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("mbNumPosWaiting".equals(actionName) && "WAI".equals(status)) {

						ResultSet numposResultSet = OracleJdbcConnection.numposDatabaseSelectQuery(
								queryLatestPortinNumberfromNumposDB("FR", Constant.FR_Portin_Number));
						while (numposResultSet.next()) {
							portinNumber = numposResultSet.getString("MAX_PORTING_NUMBER");
						}
						rioCode = RioGenerator.generateRio(Constant.NUMPOS_OP_CODE_2,
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(2, 3),
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(3, 9), portinNumber);

						System.out.println("mbNumPosWaiting process id: " + processId);
						String numposApiBody = RestApiAutomation.processPortInNumposeWaitingToDone(portinNumber,
								rioCode);

						System.out.println("====" + numposApiBody);

						RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, numposApiBody);

					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static void LoginToMyJoiFrance() {
		String configFile = Constant.DEFAULT_TESTDATA_LOCATION + "/" + Constant.configFileName;
		String browserType = Generic.getCellValue(configFile, "Browser_selection", 2, 1);
		String url = Generic.getCellValue(configFile, "Browser_selection", 3, 1);

		if (browserType.equals("Internet Explorer")) {
			System.setProperty("webdriver.ie.driver", Constant.IE_Driver_Path);
			driver = new InternetExplorerDriver();
			// Reporter.log("Opening Internet Explorer", true);
		} else if (browserType.equals("Google Chrome")) {
			System.setProperty("webdriver.chrome.driver", Constant.Chrome_Driver_Path);
			driver = new ChromeDriver();
			// Reporter.log("Opening Google Chrome", true);
		} else {
			driver = new FirefoxDriver();
			// Reporter.log("Opening Mozilla FireFox", true);
		}
		// get the URL of the page JOi UK/FR_FR/FR_EN
		driver.get(url);
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		// to maximize the opening browser window
		driver.manage().window().maximize();

		try {
			hideCookieMessage();
			String franceEmailId = existingEmailIdForFRCustomer();
			Thread.sleep(1000);

			driver.findElement(By.xpath("//section[1]/div/nav/ul/li[3]/a")).click();
			// login with existing customer details
			driver.findElement(By.name("login-fieldset__email")).sendKeys(franceEmailId);
			driver.findElement(By.name("login-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
			Thread.sleep(400);
			driver.findElement(By.cssSelector("input[value = 'LOGIN']")).click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void ActivateSimAfterLogin() {
		try {
			driver.findElement(By.cssSelector("a[href*= 'NC_MV_SUB_ACTV_REM1']")).click();
			driver.findElement(By.cssSelector("input[name='iccid']")).sendKeys(Constant.ICCID_1);
			takeScreenShot("C:/testing/workspace/Screenshots/mvno/sim_activation.png");
			WebElement activateSim = driver.findElement(By.cssSelector("input[value = 'ACTIVATE YOUR SIM']"));
			scrollDownToView(activateSim);
			activateSim.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			driver.quit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void selectLibertyOrderFromOurOffer() {
		// Actions mouseAction = new Actions(driver);
		/*
		 * New wait until element is present WebDriverWait wait = new
		 * WebDriverWait(driver, 5000); // try { // /*wait for certain amount of
		 * time, since there are posibilities // //where mousehover performed in
		 * fraction of seconds and it may not be possible to see the options.
		 */
		// Thread.sleep(1000);
		// } catch (InterruptedException e) {
		// throw new RuntimeException(e);
		// }
		Actions mouseAction = new Actions(driver);

		WebElement ourOffer = driver.findElement(By.xpath("//ul/li[2]/span"));
		WebElement moveToJOiLiberty = driver.findElement(By.xpath("//li[2]/div/div/ul/li/ul/li[2]/a"));

		mouseAction.moveToElement(ourOffer).moveToElement(moveToJOiLiberty).click().build().perform();

		driver.findElement(By.xpath("//div/div[2]/div/a[1]")).click();
	}

	public static void selectEgalitteOrderFromOurOffer() {
		Actions mouseAction = new Actions(driver);
		WebElement ourOffer = driver.findElement(By.xpath("//ul/li[2]/span"));
		WebElement moveToEgalitte = driver.findElement(By.xpath("//li[2]/div/div/ul/li/ul/li[3]/a"));

		mouseAction.moveToElement(ourOffer).moveToElement(moveToEgalitte).click().build().perform();
		// Click on 'Order Now'
		driver.findElement(By.xpath("//div/div[2]/div/a[1]")).click();
	}

	public static void provisioningDuringActivationOfOrders(String orderId) {
		String processId = "";
		checkIfActionExistsForOrder(orderId, "mbProvisionWait");

		// here we check if provisioning action is created

		try {
			ResultSet resultSet = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionWait"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String result = resultSet.getString("RESULT");
				processId = resultSet.getString("PRI_ID");

				if ("mbProvisionWait".equals(actionName) && "RETRY".equals(result)) {
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							queryUpdateActionInstanceScheduledTime(processId, "mbProvisionStart"));
					Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME); // 2mins
																	// sleep
				} else
					break;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			ResultSet resultSet = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionWait"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String result = resultSet.getString("RESULT");
				processId = resultSet.getString("PRI_ID");
				if ("mbProvisionWait".equals(actionName) && "ERROR".equals(result)) {
					// update action result=null, status = 'WAI', owner=null
					OracleJdbcConnection.crmDatabaseUpdateQuery(queryUpdateOrderLines(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(queryUpdateCinProducts(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(queryUpdateOrdOrders(orderId));
					OracleJdbcConnection
							.crmDatabaseUpdateQuery(queryUpdateActionInstances(processId, "mbProvisionWait"));
					OracleJdbcConnection
							.crmDatabaseUpdateQuery(queryUpdateProcessInstances(processId, "MBSubscription"));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			System.out.println("starting provisioning");
			String provisioningSuccess = RestApiAutomation.provisioningSuccessSignalApiBody(processId,
					"MBprovisioningSignal");
			System.out.println(provisioningSuccess);
			RestApiAutomation.httpPostTest(Constant.cue_Update, provisioningSuccess);
			System.out.println("provisioning is completed, now the customer should be active");

			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String franceUniquePortInNumber() {
		String uniquePortInNumber = "";

		try {

			ResultSet resultSet = OracleJdbcConnection
					.numposDatabaseSelectQuery(queryLatestPortinNumberfromNumposDB("FR", Constant.FR_Portin_Number));

			while (resultSet.next()) {
				String portInNumber = resultSet.getString("MAX_PORTING_NUMBER");
				uniquePortInNumber = "0" + String.valueOf(((Integer.parseInt(portInNumber)) + 1));
			}
		} catch (Exception e) {

		}

		return uniquePortInNumber;
	}

	// Convert to common method as 'CheckForActionIsDone'
	public static boolean processNumposForFrancePortIn(String orderID) {

		try {
			ResultSet resultSet = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderID, "mbNumPosStart"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				String result = resultSet.getString("RESULT");

				if ("mbNumPosStart".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
					return true;
				}
				if ("mbNumPosStart".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
					return false;
				}
				if ("mbNumPosStart".equals(actionName) && "ERR".equals(status)) {
					return false;
				}
			}
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static boolean numposProvisioningStartToNow(String orderId) {

		// here we check if mbProvisionStart action is created

		for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
			try {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionStart"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");

					if ("mbProvisionStart".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("mbProvisionStart".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("mbProvisionStart".equals(actionName) && "SCH".equals(status)) {
						OracleJdbcConnection.crmDatabaseUpdateQuery(
								queryUpdateActionInstanceScheduledTime(processId, "mbProvisionStart"));
						// 2mins wait to process
						Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME);

					}

				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	public static boolean cancellationOfIncompleteOrderInShipWaitingStage(String orderID, String CancellationApiBody) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection
						.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderID, "mbShipWaiting"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");

					if ("mbShipWaiting".equals(actionName) && "WAI".equals(status)) {
						RestApiAutomation.httpPostTest(Constant.cue_Execute, CancellationApiBody);
						return true;
					}
					if ("mbShipWaiting".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static void terminateBillingDuringOrderCancellation(String orderId) {
		checkIfActionExistsForOrder(orderId, "orTerminateBilling");

		try {
			ResultSet resultSet = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderId, "orTerminateBilling"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				// String result = resultSet.getString("RESULT");
				String processId = resultSet.getString("PRI_ID");
				System.err.println(processId);

				if ("orTerminateBilling".equals(actionName) && "SCH".equals(status)) {
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							queryUpdateActionInstanceScheduledTime(processId, "orTerminateBilling"));
					Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME);
				} else
					break;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String uniqueEmailIdForFRCustomer() {
		// Taking a unique id from existing email id
		String latestEmailId = existingEmailIdForFRCustomer();
		String existingId = latestEmailId.split("_")[2].split("@")[0];
		String uniqueId = String.valueOf(((Integer.parseInt(existingId)) + 1));
		// Creating a new Email ID
		String newUniqueEmailID = "MVNO_Automation_" + uniqueId + "@test.fr";
		System.out.println(newUniqueEmailID);
		return newUniqueEmailID;
	}

	public static String existingEmailIdForFRCustomer() {
		String lastCustomerNumber = "";
		String latestEmailId = "";
		ResultSet queryCustomerNumber = null;
		ResultSet queryEmailId = null;

		queryCustomerNumber = OracleJdbcConnection.crmDatabaseSelectQuery(queryMaxCustomerNumberFrCustomer());

		try {
			while (queryCustomerNumber.next()) {
				lastCustomerNumber = queryCustomerNumber.getString("MAX_CUSTOMER_NUMBER");
				System.out.println(lastCustomerNumber);
			}

			queryEmailId = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryLatestExistingCustomerEmailId(lastCustomerNumber));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			while (queryEmailId.next()) {

				latestEmailId = queryEmailId.getString("EMAIL_ADDRESS");
				System.out.println(latestEmailId);
			}
		} catch (SQLException e) {
			e.printStackTrace();

		}

		return latestEmailId;

	}

	public static String fetchPortOutRioCodeFromLatestCustomer() {

		String rioCode = "";
		String customerNumber = "";
		String cinProductNumber = "";
		ResultSet customerDetails = null;
		customerDetails = OracleJdbcConnection.crmDatabaseSelectQuery(queryMaxCustomerNumberFrCustomer());

		try {
			while (customerDetails.next()) {

				customerNumber = customerDetails.getString("MAX_CUSTOMER_NUMBER");
				System.out.println("CUSTOMER NUMBER: " + customerNumber);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet cinProduct = null;
		cinProduct = OracleJdbcConnection.crmDatabaseSelectQuery(queryLatestCinProductnumber(customerNumber));

		try {
			while (cinProduct.next()) {

				cinProductNumber = cinProduct.getString("MAX(CIN_NUMBER)");
				if (cinProduct.wasNull()) {
					System.out.println("Latest Cin product has no active subscriptions for this account");

					Assert.assertEquals(cinProductNumber, "1");
				} else {
					System.out.println("Cin product id: " + cinProductNumber);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet queryRioCode = null;
		queryRioCode = OracleJdbcConnection.crmDatabaseSelectQuery(queryPortoutID(cinProductNumber));

		try {
			while (queryRioCode.next()) {

				rioCode = queryRioCode.getString("ATTRIBUTE2");
				System.out.println("Port Out ID: " + rioCode);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return rioCode;
	}

	public static String fetchMsidnOfLatestCustomer() {

		String msisdn = "";
		String customerNumber = "";
		String cinProductNumber = "";
		ResultSet customerDetails = null;
		customerDetails = OracleJdbcConnection.crmDatabaseSelectQuery(queryMaxCustomerNumberFrCustomer());

		try {
			while (customerDetails.next()) {

				customerNumber = customerDetails.getString("MAX_CUSTOMER_NUMBER");
				// System.out.println("CUSTOMER NUMBER: " + customerNumber);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet cinProduct = null;
		cinProduct = OracleJdbcConnection.crmDatabaseSelectQuery(queryLatestCinProductnumber(customerNumber));

		try {
			while (cinProduct.next()) {

				cinProductNumber = cinProduct.getString("MAX(CIN_NUMBER)");
				if (cinProduct.wasNull()) {
					System.out.println("Cin product has no active subscriptions for this account");

					Assert.assertEquals(cinProductNumber, "1");
				} else {
					// System.out.println("Cin product id: " +
					// cinProductNumber);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet queryRioCode = null;
		queryRioCode = OracleJdbcConnection.crmDatabaseSelectQuery(queryCustomerMsisdn(cinProductNumber));

		try {
			while (queryRioCode.next()) {

				msisdn = queryRioCode.getString("ATTRIBUTE1");
				System.out.println("msidn: " + msisdn);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return msisdn;
	}

	// Convert to common method as 'CheckForActionIsDone'
	public static boolean portOutProvisioningIsDone(String processId) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection
						.crmDatabaseSelectQuery(queryActionInstanceWithProcessIdAndActionName(processId, "pOProv"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String result = resultSet.getString("RESULT");

					if ("pOProv".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
						return true;
					}
					if ("pOProv".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("pOProv".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
						// UPDATE ACTION_INSTANCES TABLE - ACTION TO WAITING
						OracleJdbcConnection.crmDatabaseUpdateQuery(queryUpdateActionInstances(processId, "pOProv"));
						// UPDATE PROCESS INSTANCES TO PRC
						OracleJdbcConnection.crmDatabaseUpdateQuery(queryUpdateProcessInstances(processId, "PortOut"));
						Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

						String PortOutProvisioning = RestApiAutomation.provisioningSuccessSignalApiBody(processId,
								"POprovisioningSignal");
						RestApiAutomation.httpPostTest(Constant.cue_Update, PortOutProvisioning);
						Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;

	}

	// Convert to common method as 'CheckForActionIsDone'
	public static boolean processPortOutFinishIsDone(String processId) {

		try {
			ResultSet resultSet = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryActionInstanceWithProcessIdAndActionName(processId, "pONumPosFinish"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				String result = resultSet.getString("RESULT");

				if ("pONumPosFinish".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
					return true;
				}
				if ("pONumPosFinish".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
					return false;
				}
				if ("pONumPosFinish".equals(actionName) && "ERR".equals(status)) {
					return false;
				}
			}
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// Move to common Project specific
	public static String LoginToFrMyJoiWithActiveSubscription() {

		String country = "FR";
		String latestActiveCinNumber = "";
		String customerId = "";
		String myJOiNumber = "";
		String userName = "";

		try {
			ResultSet CIN_number = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryLatestActiveCinProductnumber(country));

			while (CIN_number.next()) {
				latestActiveCinNumber = CIN_number.getString("max(CIN_NUMBER)");
			}
			ResultSet cinProductTable = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryCinProductTableWithCinProductNumber(latestActiveCinNumber));

			while (cinProductTable.next()) {
				customerId = cinProductTable.getString("CUSTOMER_ID");
				System.out.println("Customer ID: " + customerId);
				myJOiNumber = cinProductTable.getString("ATTRIBUTE1");
				System.out.println("MyJoi Number: " + myJOiNumber);
			}
			// Username from Cust_Users table
			ResultSet queryUsername = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryUsernameFromCustUsersTable(customerId));
			while (queryUsername.next()) {
				userName = queryUsername.getString("USERNAME");
				System.out.println("User Name: " + userName);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {

			hideCookieMessage();
			// Login to UK MYJOi
			driver.findElement(By.xpath("//section[1]/div/nav/ul/li[3]/a")).click();
			// login with existing customer details
			driver.findElement(By.name("login-fieldset__email")).sendKeys(userName);
			driver.findElement(By.name("login-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
			Thread.sleep(400);
			driver.findElement(By.cssSelector("input[value = 'LOGIN']")).click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return myJOiNumber;
	}

	// Move to common
	public static void franceManageSettingsFromSubscriptions(String activeJoiNumber) {
		String actualJOiNumber = "";
		int n;

		try {
			for (n = 1; n < 8; n++) {

				if (!actualJOiNumber.equals(activeJoiNumber)) {

					/**
					 * This will run until find a match with Active joi number
					 */
					// click on My Subscription
					driver.findElement(By.xpath("//a[text()='MY SUBSCRIPTIONS']")).click();
					String xpath = "//li[" + n + "]/a/div/h5";
					System.out.println(xpath);
					WebElement Subscription = driver.findElement(By.xpath(xpath));
					Subscription.click();
					actualJOiNumber = getAndVerifyText("//section[1]/h5/span");

				} else {// if found the number, click on Manage Settings option
					System.out.println("actual JoiNumber from MyJoi:" + actualJOiNumber);
					// manage settings element
					driver.findElement(By.xpath("//article/section[2]/a[2]")).click();
					break;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// move to common
	public static void selectAnyOptionFromMySettings(String pathToElement) {

		// Click on the element
		driver.findElement(By.xpath(pathToElement)).click();
	}

	// Changed submit button and SIM type, but still can be common
	// For UK, simType always 'COMBI' and any for France 'COMBI','NANO'
	public static void selectAndSubmitReplaceSimFromMySettings(String pathToReasonForReplacement, String simType) {

		/**
		 * pathToReasonForReplacement should be "LOST", "STOLEN","OTHER"
		 */
		try {
			selectAnyOptionFromMySettings("//*[@id='tab-COMMANDS']/ul/li[5]/a/p");

			if (pathToReasonForReplacement.equals("LOST")) {
				driver.findElement(By.xpath("//section/div/article/form/label[1]")).click();
			}

			if (pathToReasonForReplacement.equals("STOLEN")) {
				driver.findElement(By.xpath("//section/div/article/form/label[2]")).click();
			}
			if (pathToReasonForReplacement.equals("OTHER")) {
				driver.findElement(By.xpath("//section/div/article/form/label[3]")).click();
			}

			WebElement element = driver.findElement(By.xpath("//section/div/article/form/label[1]"));
			scrollDownToView(element);
			if (simType.equalsIgnoreCase("COMBI")) {
				driver.findElement(By.xpath("//section/div/article/form/label[4]")).click();
			}

			if (simType.equalsIgnoreCase("NANO")) {
				driver.findElement(By.xpath("//section/div/article/form/label[5]")).click();
			}
			// submit button location
			WebElement submitButton = driver.findElement(By.xpath("//input[@value='SUBMIT']"));

			scrollDownToView(submitButton);
			Thread.sleep(1000);
			submitButton.click();
			driver.quit();

			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static String simReplacementOrderdetails(String msisdn) {
		String customerNumber = "";
		String customerId = "";
		String orderID = "";

		try {
			/* get customer number from joi Number */
			ResultSet customerNumberFromCinProducts = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryCinProductsWithMsisdn(msisdn));

			while (customerNumberFromCinProducts.next()) {
				customerNumber = customerNumberFromCinProducts.getString("CUSTOMER_NUMBER");
				System.out.println("Customer Number: " + customerNumber);
				Thread.sleep(2000);
			}

			// customer ID
			ResultSet customerIdFromCinProducts = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryCustomerIdCustomer(customerNumber));

			while (customerIdFromCinProducts.next()) {
				customerId = customerIdFromCinProducts.getString("ID");
				System.out.println("Customer ID: " + customerId);
				Thread.sleep(2000);
			}
			// OrderID
			String queryOrderIdForSimReplacement = queryOrderIdFeomOrderTables(customerId);
			ResultSet replaceSimProduct = OracleJdbcConnection.crmDatabaseSelectQuery(queryOrderIdForSimReplacement);
			while (replaceSimProduct.next()) {
				orderID = replaceSimProduct.getString("MAX(ORD_ID)");
				System.out.println("SIM Replacement Order ID: " + orderID);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return orderID;
	}

	public static boolean checkForProvisioningUsertaskIsDone(String orderId, String provisioningAction) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						queryActionInstanceWithOrderIdAndActionName(orderId, provisioningAction));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String result = resultSet.getString("RESULT");

					if (provisioningAction.equals(actionName) && "FIN".equals(status)
							&& "SKIP_PROVISIONING".equals(result)) {
						return true;
					}
					if (provisioningAction.equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
						return false;
					}
					if (provisioningAction.equals(actionName) && "ERR".equals(status)) {
						return false;
					}
				}
				Thread.sleep(2500);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;

	}

	public static void simReplacementSuspensionOfProvisioningUsertaskFix(String orderID) {
		// Find orderNumber from Order ID

		try {
			String orderNumber = "";
			String processID = "";
			ResultSet queryOrderNumber = OracleJdbcConnection.crmDatabaseSelectQuery(queryOrderUsingOrderID(orderID));

			while (queryOrderNumber.next()) {
				orderNumber = queryOrderNumber.getString("ORD_NUMBER");
				System.out.println("SIM Replacement Order Number: " + orderNumber);
			}

			// Fix the user task by rest API call with 'Provisioning_Fixed'.
			// 'simReplacementSuspendProvFailureUserTask'
			boolean provisioningUserTask = checkIfActionExistsForOrder(orderID,
					"simReplacementSuspendProvFailureUserTask");
			Assert.assertTrue(provisioningUserTask);

			// Find processID of 'simReplacementSuspendProvFailureUserTask'
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					queryActionInstanceWithOrderIdAndActionName(orderID, "simReplacementSuspendProvFailureUserTask"));
			while (resultSet.next()) {
				processID = resultSet.getString("PRI_ID");
			}
			String requestProvisioningUserTask = RestApiAutomation
					.requestToResolveProvisioningSuspensionUserTaskAction(orderNumber, orderID, processID);
			RestApiAutomation.httpPostTest(Constant.cue_Execute, requestProvisioningUserTask);
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

			// Check the User task is done
			boolean usertask = checkForProvisioningUsertaskIsDone(orderID, "simReplacementSuspendProvFailureUserTask");
			// Test is failed if usertask is not done
			Assert.assertTrue(usertask);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void openNewBrowserwithinTests() {
		String configFile = Constant.DEFAULT_TESTDATA_LOCATION + "/" + Constant.configFileName;
		String browserType = Generic.getCellValue(configFile, "Browser_selection", 0, 1);

		if (browserType.equals("Internet Explorer")) {
			System.setProperty("webdriver.ie.driver", Constant.IE_Driver_Path);
			driver = new InternetExplorerDriver();
			Reporter.log("Opening Internet Explorer", true);
		} else if (browserType.equals("Google Chrome")) {
			System.setProperty("webdriver.chrome.driver", Constant.Chrome_Driver_Path);
			driver = new ChromeDriver();
			Reporter.log("Opening Google Chrome", true);
		} else {
			driver = new FirefoxDriver();
			Reporter.log("Opening Mozilla FireFox", true);
		}
		// get the URL of the page JOi UK/FR_FR/FR_EN
		String urlFrance = Generic.urlSelection("FR_English");
		driver.get(urlFrance);
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		// to maximize the opening browser window
		driver.manage().window().maximize();

	}

	public static void LoginToFrMyJoiWithMsisdn(String msisdn) {

		String customerId = "";
		String userName = "";
		try {
			ResultSet cinProductTable = OracleJdbcConnection.crmDatabaseSelectQuery(queryCinProductsWithMsisdn(msisdn));

			while (cinProductTable.next()) {
				customerId = cinProductTable.getString("CUSTOMER_ID");
				System.out.println("Customer ID: " + customerId);
			}
			// Username from Cust_Users table
			ResultSet queryUsername = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryUsernameFromCustUsersTable(customerId));
			while (queryUsername.next()) {
				userName = queryUsername.getString("USERNAME");
				System.out.println("Login to SIM Activation: " + userName);
			}

			// Open Browser
			openNewBrowserwithinTests();
			// Hide cookie message
			hideCookieMessage();
			// Login to FR MYJOi
			driver.findElement(By.xpath("//section[1]/div/nav/ul/li[3]/a")).click();
			// login with existing customer details
			driver.findElement(By.name("login-fieldset__email")).sendKeys(userName);
			driver.findElement(By.name("login-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
			Thread.sleep(400);
			driver.findElement(By.cssSelector("input[value = 'LOGIN']")).click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void activationOfSIMReplacement(String Reason) {
		try {

			WebElement elementToScroll = driver.findElement(By.xpath("//section[1]/div/article/p/strong"));
			scrollDownToView(elementToScroll);
			if (Reason.equalsIgnoreCase("LOST")) {
				driver.findElement(By.cssSelector("a[href*= 'NC_MV_SUB_SIM_LOST_DISP']")).click();
				Thread.sleep(2000);
			}
			if (Reason.equalsIgnoreCase("STOLEN")) {
				driver.findElement(By.cssSelector("a[href*= 'NC_MV_SUB_SIM_STLN_DISP']")).click();
				Thread.sleep(2000);
			}
			if (Reason.equalsIgnoreCase("OTHER")) {
				driver.findElement(By.cssSelector("a[href*= 'NC_MV_SUB_SIM_TYPE_CHNG']")).click();
				Thread.sleep(2000);
			}
			WebElement activateSim = driver.findElement(By.cssSelector("input[name='iccid']"));
			activateSim.sendKeys(Constant.ICCID_2);
			scrollDownToView(activateSim);
			driver.findElement(By.cssSelector("input[value = 'ACTIVATE YOUR SIM']")).click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			driver.quit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void simReplacementActivationByProvisioningUsertaskFix(String orderID, String reason) {
		/*
		 * Two user tasks to be fixed
		 * 1.simReplacementChangeSimProvFailureUserTask
		 * 2.simReplacementResumeProvFailureUserTask
		 */
		// Find orderNumber from Order ID

		try {
			String orderNumber = "";
			String processID = "";

			boolean provFailureUsertask = checkIfActionExistsForOrder(orderID,
					"simReplacementChangeSimProvFailureUserTask");
			Assert.assertTrue(provFailureUsertask);

			ResultSet queryOrderNumber = OracleJdbcConnection.crmDatabaseSelectQuery(queryOrderUsingOrderID(orderID));

			while (queryOrderNumber.next()) {
				orderNumber = queryOrderNumber.getString("ORD_NUMBER");
				System.out.println("SIM Replacement Order Number: " + orderNumber);
			}

			// Find processID of 'simReplacementSuspendProvFailureUserTask'
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					queryActionInstanceWithOrderIdAndActionName(orderID, "simReplacementChangeSimProvFailureUserTask"));
			while (resultSet.next()) {

				processID = resultSet.getString("PRI_ID");
				System.out.println("Process ID: " + processID);

			}

			String requestProvisioningChangeSimUserTask = RestApiAutomation
					.requestToProvisioningChangeSimUserTaskAction(orderNumber, orderID, processID);
			System.out.println(requestProvisioningChangeSimUserTask);
			RestApiAutomation.httpPostTest(Constant.cue_Execute, requestProvisioningChangeSimUserTask);
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			boolean changeSimUsertask = checkForProvisioningUsertaskIsDone(orderID,
					"simReplacementChangeSimProvFailureUserTask");
			Assert.assertTrue(changeSimUsertask);

			if (reason != "OTHER") {

				boolean provResumeFailureUsertask = checkIfActionExistsForOrder(orderID,
						"simReplacementResumeProvFailureUserTask");
				Assert.assertTrue(provResumeFailureUsertask);
				// Find processID of 'simReplacementSuspendProvFailureUserTask'
				ResultSet ResumeProvisioning = OracleJdbcConnection
						.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderID,
								"simReplacementResumeProvFailureUserTask"));
				while (ResumeProvisioning.next()) {

					processID = ResumeProvisioning.getString("PRI_ID");

				}

				String requestProvisioningActivationUserTask = RestApiAutomation
						.requestToProvisioningResumeUserTaskAction(orderNumber, orderID, processID);
				System.out.println(requestProvisioningActivationUserTask);
				RestApiAutomation.httpPostTest(Constant.cue_Execute, requestProvisioningActivationUserTask);
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

				boolean provisioningResumeUsertask = checkForProvisioningUsertaskIsDone(orderID,
						"simReplacementResumeProvFailureUserTask");
				Assert.assertTrue(provisioningResumeUsertask);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// Convert to common method as 'CheckForActionIsDone'
	public static boolean checkForSimReplacementOrderIsDone(String orderId) {
		boolean simReplaceFinishAction = checkIfActionExistsForOrder(orderId, "simReplacementFinish");
		Assert.assertTrue(simReplaceFinishAction);

		try {
			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						queryActionInstanceWithOrderIdAndActionName(orderId, "simReplacementFinish"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String result = resultSet.getString("RESULT");

					if ("simReplacementFinish".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
						return true;
					}
					if ("simReplacementFinish".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
						return false;
					}
					if ("simReplacementFinish".equals(actionName) && "ERR".equals(status)) {
						return false;
					}

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static boolean verifyCinProductIsActive(String orderId) {
		// Verify CIN_PRODUCT with order id, should be Active
		String Query = "Select * from CIN_PRODUCTS where ORDER_ID = '" + orderId + "'";
		ResultSet cinProducts = null;
		cinProducts = OracleJdbcConnection.crmDatabaseSelectQuery(Query);
		try {
			while (cinProducts.next()) {
				String status = cinProducts.getString("STATUS");
				if ("ACT".equals(status)) {
					return true;
				} else {
					return false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static boolean checkForAnyUsertaskIsDone(String orderId, String provisioningAction) {

		try {
			ResultSet resultSet = OracleJdbcConnection
					.crmDatabaseSelectQuery(queryActionInstanceWithOrderIdAndActionName(orderId, provisioningAction));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				String result = resultSet.getString("RESULT");

				if (provisioningAction.equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
					return true;
				}
				if (provisioningAction.equals(actionName) && "FIN".equals(status) && !"SUCCESS".equals(result)) {
					return false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static void simReplacementPoliceVerificationReportUsertaskFix(String orderID) {
		// Find orderNumber from Order ID

		try {
			String orderNumber = "";
			String processID = "";
			ResultSet queryOrderNumber = OracleJdbcConnection.crmDatabaseSelectQuery(queryOrderUsingOrderID(orderID));

			while (queryOrderNumber.next()) {
				orderNumber = queryOrderNumber.getString("ORD_NUMBER");
				System.out.println("SIM Replacement Order Number: " + orderNumber);
			}

			// Fix the user task by rest API call with 'Provisioning_Fixed'.
			// 'simReplacementSuspendProvFailureUserTask'
			boolean checkForPoliceReport = checkIfActionExistsForOrder(orderID, "simReplacementPoliceReportUserTask");
			Assert.assertTrue(checkForPoliceReport);

			// Find processID of 'simReplacementSuspendProvFailureUserTask'
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					queryActionInstanceWithOrderIdAndActionName(orderID, "simReplacementPoliceReportUserTask"));
			while (resultSet.next()) {

				processID = resultSet.getString("PRI_ID");
			}
			String requestPoliceReportUserTask = RestApiAutomation
					.requestToFixPoliceVerificationUserTaskAction(orderNumber, orderID, processID);
			RestApiAutomation.httpPostTest(Constant.cue_Execute, requestPoliceReportUserTask);
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

			// Check the User task is done
			boolean usertask = checkForAnyUsertaskIsDone(orderID, "simReplacementPoliceReportUserTask");
			// Test is failed if usertask is not done
			Assert.assertTrue(usertask);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}