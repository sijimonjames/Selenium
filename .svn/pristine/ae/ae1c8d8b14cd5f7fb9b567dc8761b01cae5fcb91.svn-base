
package com.acneuro.test.automation.libraries;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * @author sijames
 *
 */
public class ExtractTextFromPDF extends ConfigLib {

	// public static void textFromPdf() throws IOException {
	//
	// PDFTextStripper pdfStripper = null;
	//
	// URL url = new URL(driver.getCurrentUrl().replace("https", "http"));
	// // URL url = new URL(driver.getCurrentUrl());
	//
	// BufferedInputStream fileToParse = new
	// BufferedInputStream(url.openStream());
	//
	// // parse() -- This will parse the stream and populate the COSDocument
	// // object.
	// // COSDocument object -- This is the in-memory representation of the PDF
	// // document
	//
	// PDFParser parser = new PDFParser(fileToParse);
	//
	// parser.parse();
	//
	// pdfStripper = new PDFTextStripper();
	//
	// // pdfStripper.setStartPage(3);
	// // pdfStripper.setEndPage(1);
	//
	// // getPDDocument() -- This will get the PD document that was parsed.
	// // When you are done with this document you must call close() on it to
	// // release resources
	// // PDFTextStripper() -- This class will take a pdf document and strip
	// // out all of the text and ignore the formatting and such.
	//
	// String output = pdfStripper.getText(parser.getPDDocument());
	// System.out.println(output);
	// parser.getPDDocument().close();
	//
	// }

	public static void saveFileFromUrlWithCommonsIO(String fileName, String fileUrl)
			throws MalformedURLException, IOException {

//		FileUtils.copyURLToFile(new URL(fileUrl.replace("https", "http")), new File(fileName));
		
		URL url = new URL(driver.getCurrentUrl().replace("https", "http"));
//		URL url = new URL(driver.getCurrentUrl());
		
		InputStream in = url.openStream();        
	    try {
	       FileOutputStream out = new FileOutputStream(fileName);
	       try {
	          byte[] buffer = new byte[1024];
	          int count;
	          while ((count = in.read(buffer)) > 0) {
	             out.write(buffer, 0, count);
	          }
	          out.flush();
	       } finally {
	          out.close();
	       }
	    } finally {
	       in.close();
	    }
	}

}
