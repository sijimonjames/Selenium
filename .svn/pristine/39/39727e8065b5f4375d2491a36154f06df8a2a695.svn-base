package com.acneuro.test.automation.france_workflow_tests;

import java.sql.ResultSet;
import java.util.Date;

import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Test;

import com.acneuro.test.automation.libraries.Constant;
import com.acneuro.test.automation.libraries.FranceProjectSpecific;
import com.acneuro.test.automation.libraries.OracleJdbcConnection;
import com.acneuro.test.automation.libraries.QueryUtils;
import com.acneuro.test.automation.libraries.RestApiAutomation;

public class TC_6_FrancePortOutTests {

	// String orderId = "";
	// String orderNumber = "";
	// String taskId = ""; // Need task id to 'resolving_tasks'
	// String latestPriId = "";
	//
	// Test1
	@Test(priority = 1)
	public void portoutFrance() {

		String portOutId = "";
		String msisdn = "";
		String processId = "";

		// Take portout id from database/ ATTRIBUTE1 from CIN_PRODUCTS table
		portOutId = FranceProjectSpecific.fetchPortOutRioCodeFromLatestCustomer();
		msisdn = FranceProjectSpecific.fetchMsidnOfLatestCustomer();
		// Create a date format for API call
		String date = FranceProjectSpecific.dateToString(new Date(), "yyyyMMdd");
		// fake EGP request API call to startPortout
		String apiPortOutForNumpos = RestApiAutomation.requestToStartPortoutForFrance(date, msisdn, portOutId);
		System.out.println(apiPortOutForNumpos);

		RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, apiPortOutForNumpos);
		System.out.println("First portout request is processed");

		// EGP request to update Cues
		String apiPortOutForCues = RestApiAutomation.secondRequestToStartPortoutForFrance(date, msisdn, portOutId);
		System.out.println(apiPortOutForCues);

		RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, apiPortOutForCues);
		System.out.println("Second portout post request is processed");

		// Check for the 'pOProv' action is created
		ResultSet queryProcessId = OracleJdbcConnection
				.numposDatabaseSelectQuery(QueryUtils.queryPortOutProcessIdfromNuposDB(msisdn));
		try {
			while (queryProcessId.next()) {

				processId = queryProcessId.getString("REFERENCE_ID");
				System.out.println(String.format("The process id of portout process is %s", processId));
				if (queryProcessId.wasNull()) {
					System.out.println("Test failed as Numpos is not updated with processed ID");
					Assert.assertEquals(processId, "1");
				} else {
					Boolean provisioning = FranceProjectSpecific.checkIfActionExistsWithProcessId(processId, "pOProv");
					Assert.assertTrue(provisioning);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Change the portout in Process instance in 'PRC'
		OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateProcessInstances(processId, "PortOut"));
		// If 'pOProv' is in error, change to wai status
		// send a provisioning request to finish 'POprovisioningSignal'
		// check for the action "pONumPosFinish" finished in success
		boolean portOutProvisioning = FranceProjectSpecific.portOutProvisioningIsDone(processId);
		Assert.assertTrue(portOutProvisioning);
		// if provisioning goes to scheduled, change it sysdate
		boolean portOutFinish = FranceProjectSpecific.processPortOutFinishIsDone(processId);
		Assert.assertTrue(portOutFinish);
		Reporter.log(String.format("The customer with msisdn %s is ported out", msisdn));
	}
}
