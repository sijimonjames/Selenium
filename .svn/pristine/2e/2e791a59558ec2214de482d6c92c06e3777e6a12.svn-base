package com.acneuro.test.automation.libraries;

import java.io.File;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Reporter;

public class MVNOProjectSpecific extends ConfigLib {

	public static void hideCookieMessage() {

		WebElement message = driver.findElement(By.xpath(".//*[@id='cookiemyjoi']/div/a"));

		if (message.isDisplayed()) {

			message.click();

		}
	}

	// This is a generic method to verify a text present in the page
	public static String getAndVerifyText(String identifier) {
		String Text = driver.findElement(By.xpath(identifier)).getText();
		return Text;
	}

	public static void verifyTitleOfPage(String expectedTitle) {
		Assert.assertEquals(expectedTitle, driver.getTitle());
		if (driver.getTitle().equals(expectedTitle)) {
			Reporter.log("PASS:MyJOi Page " + expectedTitle + " is as expected", true);

		} else {
			Reporter.log("FAIL: My Joi Page " + expectedTitle + " is NOT as expected", true);
		}
	}

	public static void scrollDownToView(WebElement element) {
		try {
			JavascriptExecutor jse = (JavascriptExecutor) driver;
			jse.executeScript("arguments[0].scrollIntoView();", element);
			Thread.sleep(500);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void takeScreenShot(String File_Location) {
		try {
			File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
			Thread.sleep(4000);
			// "C:/testing/workspace/Screenshots/mvno/screenshot.png"
			FileUtils.copyFile(scrFile, new File(File_Location));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void moveCursorToDifferentLocationInSameElement(String Element) {
		try {

			WebElement MarkAs = driver.findElement(By.xpath(Element));
			int Width = MarkAs.getSize().width;
			int Height = MarkAs.getSize().height;
			int MyX = (Width * 95) / 100;// spot to click is at 95% of the width
			int MyY = Height / 2;// anywhere above Height/2 works
			Actions Actions = new Actions(driver);
			Actions.moveToElement(MarkAs, MyX, MyY);
			Actions.click().build().perform();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void orderCreationPageInEnglish() {
		// Click on 'Order' button
		driver.findElement(By.xpath("//a [text()='ORDER']")).click();
	}

	public static void orderCreationPageInFrench() {
		// Click on 'Order' button
		driver.findElement(By.xpath("//a [text()='COMMANDEZ']")).click();
	}

	public static void Login_creation_page() {
		// Click on 'Login' button
		driver.findElement(By.xpath("//a [text()='LOGIN']")).click();
	}

	public static void JOi_LIBERTY_creation_page() {
		// Click on 'Joi Liberty' button
		driver.findElement(By.xpath("//a [text()='JOi LIBERTY']")).click();
	}

	// Select Joi Liberty UK/Joi Liberty FR/Egalitte FR
	public static void pricePlanSelection(String pricePlanName) {
		// check the radio button 'Joi Liberty Fr'
		if (pricePlanName.equalsIgnoreCase("joiLibertyFR")) {
			driver.findElement(By.xpath("//div[2]/label[1]/p[1]/b")).click();
		}
		if (pricePlanName.equalsIgnoreCase("joiEgalitteFR")) {
			// check the radio button 'Joi Egalitte Fr'
			driver.findElement(By.xpath("//div[2]/label[2]/p[1]/b")).click();
		}
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void joiLibertyPricePlan() {
		// check the radio button 'Joi Liberty'
		try {
			driver.findElement(By.xpath("//div[2]/label[1]/p[1]/b")).click();
			Thread.sleep(500);
			// verification of connection fee and total amount to be paid
			// String connFee =
			// FranceProjectSpecific.getAndVerifyText("//*[@id='receipt']/ul/li[2]/ul/li[3]/span");
			// String connectionFee = connFee.replaceAll("\\s+", " ").trim();
			// System.out.println("Connection Fee: " + connectionFee);
			// Assert.assertEquals(connectionFee, Constant.FR_CONNECTION_FEE);
			// String amountToBePaid =
			// FranceProjectSpecific.getAndVerifyText("//*[@id='receipt']/ul/li[2]/div/p/span");
			// String totalAmount = amountToBePaid.replaceAll("\\s+", "
			// ").trim();
			// System.out.println("Total amount to be paid for Liberty Plan: " +
			// totalAmount);
			// Assert.assertEquals(totalAmount,
			// Constant.FR_LIBERTY_TOTAL_PRICE);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void joiEgalittePricePlan() {
		// check the radio button 'Joi Liberty'
		try {
			driver.findElement(By.xpath("//div[2]/label[2]/p[1]/b")).click();
			Thread.sleep(500);
			// verification of connection fee and total amount to be paid
			String connFeeEgalitte = MVNOProjectSpecific.getAndVerifyText("//*[@id='receipt']/ul/li[2]/ul/li[3]/span");
			String connectionFeeEgalitte = connFeeEgalitte.replaceAll("\\s+", " ").trim();
			System.out.println("connection fee: " + connectionFeeEgalitte);
			Assert.assertEquals(connectionFeeEgalitte, Constant.FR_CONNECTION_FEE);

			String tolalAmountEgalitte = MVNOProjectSpecific.getAndVerifyText("//*[@id='receipt']/ul/li[2]/div/p/span");
			String totalAmount = tolalAmountEgalitte.replaceAll("\\s+", " ").trim();
			System.out.println("Total Amount For Egalitte Plan: " + totalAmount);
			Assert.assertEquals(totalAmount, Constant.FR_EGALITTE_TOTAL_PRICE);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Reqired only for France
	public static void SimTypeSelectionForPricePlan(String SIMType, String pricePlan) {
		// Select "Combi"
		if (SIMType.equalsIgnoreCase("combi") && pricePlan.equalsIgnoreCase("liberty")) {
			WebElement combiSim = driver.findElement(By.xpath("//*[@id='FRMV1504OF60']/section/div[3]/label[1]/p/b"));
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			scrollDownToView(combiSim);
			combiSim.click();
		}
		if (SIMType.equalsIgnoreCase("combi") && pricePlan.equalsIgnoreCase("egalitte")) {
			WebElement combiSim = driver.findElement(By.xpath("//*[@id='FRMV1509OF66']/section/div[3]/label[1]/p/b"));
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			scrollDownToView(combiSim);
			combiSim.click();
		}
		if (SIMType.equalsIgnoreCase("nano")) {
			WebElement nanoSim = driver.findElement(By.xpath("//div[1]/section/div[3]/label[2]/p/b"));
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			scrollDownToView(nanoSim);
			nanoSim.click();
		}

	}

	// This is same for all pages
	public static void ourOfferPageAddToBasketButton() {
		// work for all 'Add To Basket' cases
		boolean addToBasketButton = driver.findElement(By.xpath("//article/form/div[3]/input[6]")).isEnabled();
		Assert.assertTrue(addToBasketButton);

		if (addToBasketButton == true) {
			driver.findElement(By.xpath("//article/form/div[3]/input[6]")).click();
		}
	}

	public static void add_to_basket_without_porting() {
		// work for all 'Add To Basket' cases

		WebElement element = driver.findElement(By.xpath("//div/input[5]"));

		MVNOProjectSpecific.scrollDownToView(element);
		element.click();
	}

	public static void addToBasketWithPortin() {

		// Click the radio Button for Port IN

		WebElement element = driver.findElement(By.cssSelector("label[class='select-bar checkbox']"));
		element.click();
		MVNOProjectSpecific.scrollDownToView(element);
		// Click on Add to Basket Button
		driver.findElement(By.xpath("//div/input[5]")).click();
	}

	public static void checkOutOrder() {
		// Order check out button click
		driver.findElement(By.xpath("//div/article/section/div[2]/a")).click();
	}

	public static void FranceCustomerAccountCreation() {
		String Email_ID = MVNOProjectSpecific.uniqueEmailIdForFRCustomer();
		driver.findElement(By.name("email-fieldset__email")).sendKeys(Email_ID);
		driver.findElement(By.name("email-fieldset__confirm-email")).sendKeys(Email_ID);
		driver.findElement(By.name("password-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
		driver.findElement(By.name("password-fieldset__confirm-password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		driver.findElement(By.id("nextPageButton")).click();
	}

	public static void Customer_details(String salutation, String First_Name, String Middle_Name, String Last_Name,
			String DOB, String Phone) {
		// drop down selection
		try {
			WebElement ddList = driver.findElement(By.xpath("//div[2]/fieldset[1]/div/select"));
			Select s = new Select(ddList);
			s.selectByValue(salutation);
			// First name
			driver.findElement(By.name("personal-details-fieldset__first-name")).sendKeys(First_Name);
			driver.findElement(By.name("personal-details-fieldset__prefix")).sendKeys(Middle_Name);
			driver.findElement(By.name("personal-details-fieldset__last-name")).sendKeys(Last_Name);
			// DOB field need a click before send the value
			driver.findElement(By.name("personal-details-fieldset__date-of-birth")).click();
			Thread.sleep(500);
			driver.findElement(By.name("personal-details-fieldset__date-of-birth")).sendKeys(DOB);
			Thread.sleep(500);
			driver.findElement(By.name("personal-details-fieldset__phone-number")).sendKeys(Phone);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void uploadCustomerIdCopy() {
		// Select and upload an Id copy of the France customer
		// This is only for France customer
		WebElement fileUploadButton = driver.findElement(By.xpath("//*[@id='page1']/input"));
		fileUploadButton.click();
		MVNOProjectSpecific.scrollDownToView(fileUploadButton);
		// Handle the hidden division pop-up
		WebElement fileUpload = driver.findElement(By.xpath("//input[@type='file']"));
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		fileUpload.sendKeys(Constant.FranceIdFileName);
		try {
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("France ID is uploaded successfully");
	}

	public static void contactAndBillingAdress(String zipcode, String street, String addressValue) {

		try {
			// post code
			driver.findElement(By.name("addval__zip")).sendKeys(zipcode);
			// Street
			driver.findElement(By.name("addval__street")).sendKeys(street);
			// Click to search address
			WebElement element = driver
					.findElement(By.cssSelector("input[class='addvalValidateButton call-to-action button']"));
			element.click();
			// List of Addresses
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			WebElement addressList = driver.findElement(By.xpath("//div[2]/fieldset[2]/div/select"));
			Select select = new Select(addressList);

			select.selectByValue(addressValue);

		} catch (Exception e) {
			e.printStackTrace();
		}
		// Click on create account button by scroll down the page to make the
		// element into view
		try {
			WebElement createAccount = driver.findElement(By.xpath("//div/article/form/section[1]/input"));
			System.out.println(createAccount.isEnabled());
			Thread.sleep(500);
			MVNOProjectSpecific.scrollDownToView(createAccount);
			createAccount.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Need to scrap this
	public static void updateEmailIInExcelSheet() {
		// get the customer Email ID and update in Excel sheet in 'Existing
		// Customers' section
		String configFile = Constant.DEFAULT_TESTDATA_LOCATION + "/" + Constant.configFileName;
		String existingCustomer = Generic.getCellValue(configFile, "Email_ids", 2, 4);
		Generic.updateCellValue(configFile, "Email_ids", 5, 4, existingCustomer);
		// update the email ID to unique value for next customer creation
		String count = Generic.getCellValue(configFile, "Email_ids", 2, 2);
		System.out.println(count);
		int count1 = Integer.parseInt(count);
		int number = count1 + 1;
		String cellValue1 = String.valueOf(number);
		Generic.updateCellValue(configFile, "Email_ids", 2, 2, cellValue1);
		String uniqueEmailIdForNextTest = "MVNO_Automation_" + cellValue1 + "@test.fr";
		Generic.updateCellValue(configFile, "Email_ids", 2, 4, uniqueEmailIdForNextTest);
	}

	public static void continueButtonAfterAccountCreation() {
		// post code
		WebElement continueButton = driver.findElement(By.xpath("//section/div/article/section/a"));
		MVNOProjectSpecific.scrollDownToView(continueButton);
		continueButton.click();
	}

	public static void continueToStep3WithoutPorting() {
		// Click to next page from step 3
		WebElement continueStep3 = driver.findElement(By.xpath("//form/dl/dd[2]/div/section/a[1]"));
		MVNOProjectSpecific.scrollDownToView(continueStep3);
		continueStep3.click();
	}

	public static void continueToStep3WithPortin() {
		// Click to next page from step 3

		try {
			String uniquePortinNumber = franceUniquePortInNumber();

			Thread.sleep(500);

			System.out.println("New Portin number: " + uniquePortinNumber + "");
			String rioCode = RioGenerator.generateRio(Constant.NUMPOS_OP_CODE_1,
					Constant.NUMPOS_DEFAULT_RIO_CODE.substring(2, 3), Constant.NUMPOS_DEFAULT_RIO_CODE.substring(3, 9),
					uniquePortinNumber);
			Reporter.log("RIO Code: " + rioCode);
			Thread.sleep(500);
			driver.findElement(By.cssSelector("input[name = 'number-porting__currentNumber']"))
					.sendKeys(uniquePortinNumber);
			driver.findElement(By.cssSelector("input[name = 'number-porting__riocode']")).sendKeys(rioCode);
			driver.findElement(By.cssSelector("label[class = 'select-bar checkbox cancel-current-subscription']"))
					.click();
			WebElement continueStep3 = driver.findElement(By.xpath("//form/dl/dd[2]/div/section/a[1]"));
			MVNOProjectSpecific.scrollDownToView(continueStep3);
			continueStep3.click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void franceBankDetailsAndClickToContinue(String accountNumberInIban, String BIC) {
		driver.findElement(By.name("bank-account__iban")).sendKeys(accountNumberInIban);
		driver.findElement(By.name("bank-account__bic")).sendKeys(BIC);

		WebElement continueToNext = driver.findElement(By.xpath("//dl/dd[3]/div/section/a[1]"));
		MVNOProjectSpecific.scrollDownToView(continueToNext);
		continueToNext.click();

	}

	public static void orderSummaryPageForNewCustomer(String Rep_ID) {
		WebElement elementToScroll = driver
				.findElement(By.xpath("//*[@id='panel3']/fieldset[6]/div/section/div/div[1]/p"));
		scrollDownToView(elementToScroll);

		WebElement MarkAs = driver.findElement(By.xpath("//*[@id='panel3']/fieldset[9]/label"));
		int Width = MarkAs.getSize().width;
		int Height = MarkAs.getSize().height;
		int MyX = (Width * 95) / 100;// spot to click is at 95% of the width
		int MyY = Height / 2;// anywhere above Height/2 works
		Actions Actions = new Actions(driver);
		Actions.moveToElement(MarkAs, MyX, MyY);
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		Actions.click().build().perform();

		driver.findElement(By.xpath("//article/form/dl/dd[4]/div/fieldset[10]/label")).click();
		driver.findElement(By.xpath("//article/form/dl/dd[4]/div/fieldset[11]/label")).click();
		driver.findElement(By.name("teamid__teamid")).sendKeys(Rep_ID);
		WebElement finalPage = driver.findElement(By.xpath("//div/article/form/section/input"));
		MVNOProjectSpecific.scrollDownToView(finalPage);
		finalPage.click();
		// Explicit wait until Datacash external page opens up
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

	public static void orderSummaryPageForExitstingCustomer(String Rep_ID) {
		try {

			WebElement elementToScroll = driver.findElement(By.xpath("//*[@id='panel3']/fieldset[4]/div/ul/li[2]/h6"));
			scrollDownToView(elementToScroll);

			WebElement MarkAs = driver.findElement(By.xpath("id('panel3')/fieldset[8]/label"));
			int Width = MarkAs.getSize().width;
			int Height = MarkAs.getSize().height;
			int MyX = (Width * 95) / 100;// spot to click is at 95% of the width
			int MyY = Height / 2;// anywhere above Height/2 works
			Actions Actions = new Actions(driver);
			Actions.moveToElement(MarkAs, MyX, MyY);
			Actions.click().build().perform();

			Thread.sleep(500);

			driver.findElement(By.xpath("id('panel3')/fieldset[9]/label")).click();
			driver.findElement(By.xpath("id('panel3')/fieldset[10]/label")).click();
			driver.findElement(By.name("teamid__teamid")).sendKeys(Rep_ID);
			WebElement submitOrderButton = driver.findElement(By.xpath("//div/article/form/section/input"));
			MVNOProjectSpecific.scrollDownToView(submitOrderButton);
			submitOrderButton.click();
			// Explicit wait until Datacash external page opens up
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Automating datacash page
	public static void Payment_Datacash(String Card_Type, String Card_Number, String Expiry_Year, String CVV) {

		// Selecting the required Credit card Visa, master card etc..
		WebElement cardList = driver.findElement(By.xpath("//tbody/tr[4]/td/select"));
		Select s = new Select(cardList);
		s.selectByVisibleText(Card_Type);

		// Card Number
		driver.findElement(By.name("card_number")).sendKeys(Card_Number);

		// Expiry mmyy, Month retain same and year need to be in future
		WebElement yearList = driver.findElement(By.name("exp_year"));
		Select s1 = new Select(yearList);
		s1.selectByVisibleText(Expiry_Year);
		driver.findElement(By.name("cv2_number")).sendKeys(CVV);
		driver.findElement(By.xpath("/html/body/form/div/input")).click();
		try {
			Thread.sleep(7000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} // New page loading
			// Authentication
		driver.findElement(By.xpath("//table/tbody/tr[1]/td[1]/input")).click();
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	// Resolving tasks API call

	public static String processResolvingTasksSignal(String orderNumber) {

		String taskId = "";
		String orderId = "";
		String latestPriId = "";

		try {
			OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateOrderStatus(orderNumber));
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.queryOrderStatus(orderNumber));
			while (resultSet.next()) {
				orderId = resultSet.getString("ID");
				System.out.println(orderId);
				System.out.println(resultSet.getString("ORD_NUMBER"));
				System.out.println(resultSet.getString("STATUS"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.queryTaskId(orderId));
			while (resultSet.next()) {
				taskId = resultSet.getString("ID");
				System.out.println("taskId: " + taskId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(QueryUtils.querylatestProcessId(orderId));
			while (resultSet.next()) {
				Thread.sleep(500);
				latestPriId = resultSet.getString("max(PRI_ID)");
				System.out.println("Process ID: " + latestPriId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		// RESOLVING_TASKS API signal
		String resolvingTasksApiBody = RestApiAutomation.resolvingTasksApiBody(latestPriId, taskId);
		RestApiAutomation.httpPostTest(Constant.cue_Update, resolvingTasksApiBody);

		return orderId;
	}

	// Shipping API call
	public static void workerTriggerForBillingUpdate(String workerUrl) {
		try {
			driver = new FirefoxDriver();
			// implicit wait to complete each browser action
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(workerUrl);
			// to maximize the opening browser window
			driver.manage().window().maximize();
			// Trigger worker 'QueryOrderStatusJob'
			WebElement workerQueryOrderStatusJob = driver.findElement(By.xpath("//div[3]/div/div[3]/div[2]/a[1]"));
			MVNOProjectSpecific.scrollDownToView(workerQueryOrderStatusJob);
			workerQueryOrderStatusJob.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			// Trigger worker 'QuerySubscriptionJob'
			WebElement workerQuerySubscriptionJob = driver
					.findElement(By.xpath("//div[2]/div[3]/div/div[16]/div[2]/a[1]"));
			MVNOProjectSpecific.scrollDownToView(workerQuerySubscriptionJob);
			workerQuerySubscriptionJob.click();
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			driver.quit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static boolean checkIfActionExistsForOrder(String orderID, String actionName) {
		try {
			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, actionName));
				while (resultSet.next()) {
					return true;
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public static boolean checkIfActionExistsWithProcessId(String processId, String actionName) {
		try {
			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithProcessIdAndActionName(processId, actionName));
				while (resultSet.next()) {
					return true;
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public static boolean processUpfrontPayment(String orderID) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "ofUpfrontPaymentWait"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");

					if ("ofUpfrontPaymentWait".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("ofUpfrontPaymentWait".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("ofUpfrontPaymentWait".equals(actionName) && !"FIN".equals(status)) {
						System.out.println(String.format("connecting billing service web interface for %d time", i));
						MVNOProjectSpecific.workerTriggerForBillingUpdate(Constant.billsrvWorkerUrl);
					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// Shipping API call

	public static boolean processShipWait(String orderID, String ShippingProcessName) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, ShippingProcessName));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");
					System.out.println("shipping process id: " + processId);

					if (ShippingProcessName.equals("mbShipWaiting") && ShippingProcessName.equals(actionName)
							&& !"FIN".equals(status)) {
						RestApiAutomation.httpPostTest(Constant.cue_Update,
								RestApiAutomation.shippingSignalApiBody(Constant.ICCID_1, processId));
					} else if (ShippingProcessName.equals("simReplacementShipWait")
							&& ShippingProcessName.equals(actionName) && !"FIN".equals(status)) {
						RestApiAutomation.httpPostTest(Constant.cue_Update,
								RestApiAutomation.shippingSignalApiBody(Constant.ICCID_2, processId));
						Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
					}
					if (ShippingProcessName.equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if (ShippingProcessName.equals(actionName) && "ERR".equals(status)) {
						return false;
					}

				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// simple date format for xmls
	public static String dateToString(Date date, String format) {
		SimpleDateFormat formatter = new SimpleDateFormat(format);
		return formatter.format(date);
	}

	public static boolean processEligibilityCheckWaiting(String orderID) {
		String portinNumber = "";
		String rioCode = "";

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "mbElegibilityCheck"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");
					System.out.println("eligibility Check process id: " + processId);

					if ("mbElegibilityCheck".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("mbElegibilityCheck".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("mbElegibilityCheck".equals(actionName) && !"FIN".equals(status)) {
						String date = dateToString(new Date(), "yyyyMMdd");
						ResultSet numposResultSet = OracleJdbcConnection.numposDatabaseSelectQuery(
								QueryUtils.queryLatestPortinNumberfromNumposDB("FR", Constant.FR_Portin_Number));
						while (numposResultSet.next()) {
							portinNumber = numposResultSet.getString("MAX_PORTING_NUMBER");
						}
						rioCode = RioGenerator.generateRio(Constant.NUMPOS_OP_CODE_1,
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(2, 3),
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(3, 9), portinNumber);

						String eligibilityApiBody = RestApiAutomation.portInEligibilityCheckNumposeResponse(date,
								portinNumber, rioCode);

						System.out.println("====" + eligibilityApiBody);

						RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, eligibilityApiBody);

					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static boolean processNumposWaiting(String orderID) {
		String portinNumber = "";
		String rioCode = "";

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "mbNumPosWaiting"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");
					System.out.println("mbNumPosWaiting process id: " + processId);

					if ("mbNumPosWaiting".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("mbNumPosWaiting".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("mbNumPosWaiting".equals(actionName) && !"FIN".equals(status)) {
						String date = dateToString(new Date(), "yyyyMMdd");
						ResultSet numposResultSet = OracleJdbcConnection.numposDatabaseSelectQuery(
								QueryUtils.queryLatestPortinNumberfromNumposDB("FR", Constant.FR_Portin_Number));
						while (numposResultSet.next()) {
							portinNumber = numposResultSet.getString("MAX_PORTING_NUMBER");
						}
						rioCode = RioGenerator.generateRio(Constant.NUMPOS_OP_CODE_2,
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(2, 3),
								Constant.NUMPOS_DEFAULT_RIO_CODE.substring(3, 9), portinNumber);

						String numposApiBody = RestApiAutomation.processPortInNumposeWaitingToDone(date, portinNumber,
								rioCode);

						System.out.println("====" + numposApiBody);

						RestApiAutomation.httpPostTest(Constant.NUMPOS_INCOMING_REQUEST, numposApiBody);

					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
	//Move to France Project specific
	public static void LoginToMyJoiFrance(String language) {
		String configFile = Constant.DEFAULT_TESTDATA_LOCATION + "/" + Constant.configFileName;
		String browserType = Generic.getCellValue(configFile, "Browser_selection", 2, 1);

		String url = Generic.urlSelection(language);

		if (browserType.equals("Internet Explorer")) {
			System.setProperty("webdriver.ie.driver", Constant.IE_Driver_Path);
			driver = new InternetExplorerDriver();
			// Reporter.log("Opening Internet Explorer", true);
		} else if (browserType.equals("Google Chrome")) {
			System.setProperty("webdriver.chrome.driver", Constant.Chrome_Driver_Path);
			driver = new ChromeDriver();
			// Reporter.log("Opening Google Chrome", true);
		} else {
			driver = new FirefoxDriver();
			// Reporter.log("Opening Mozilla FireFox", true);
		}
		// get the URL of the page JOi UK/FR_FR/FR_EN
		driver.get(url);
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		// to maximize the opening browser window
		driver.manage().window().maximize();

		try {
			hideCookieMessage();
			String franceEmailId = existingEmailIdForFRCustomer();
			Thread.sleep(1000);

			driver.findElement(By.xpath("//section[1]/div/nav/ul/li[3]/a")).click();
			// login with existing customer details
			driver.findElement(By.name("login-fieldset__email")).sendKeys(franceEmailId);
			driver.findElement(By.name("login-fieldset__password")).sendKeys(Constant.DEFAULT_MYJOI_PASSWORD);
			Thread.sleep(400);
			driver.findElement(By.cssSelector("input[name = 'submit']")).click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// English / French / Dutch / Danish
	public static void ActivateSimAfterLogin() {

		driver.findElement(By.cssSelector("a[href*= 'NC_MV_SUB_ACTV_REM1']")).click();
		driver.findElement(By.cssSelector("input[name='iccid']")).sendKeys(Constant.ICCID_1);
		takeScreenShot("C:/testing/workspace/mvno/ScreenShots/France_French/France_French_sim_activation.png");
		// Change to normal path
		WebElement activateSim = driver.findElement(By.xpath("//div/article/form/section[9]/input"));
		scrollDownToView(activateSim);
		activateSim.click();
		try {
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		driver.quit();

	}

	public static void selectLibertyOrderFromOurOffer() {
		Actions mouseAction = new Actions(driver);
		WebElement ourOffer = driver.findElement(By.xpath("//ul/li[2]/span"));
		WebElement moveToJOiLiberty = driver.findElement(By.xpath("//li[2]/div/div/ul/li/ul/li[2]/a"));

		mouseAction.moveToElement(ourOffer).moveToElement(moveToJOiLiberty).click().build().perform();

		driver.findElement(By.xpath("//div/div[2]/div/a[1]")).click();
	}

	public static void selectEgalitteOrderFromOurOffer() {
		Actions mouseAction = new Actions(driver);
		WebElement ourOffer = driver.findElement(By.xpath("//ul/li[2]/span"));
		WebElement moveToEgalitte = driver.findElement(By.xpath("//li[2]/div/div/ul/li/ul/li[3]/a"));

		mouseAction.moveToElement(ourOffer).moveToElement(moveToEgalitte).click().build().perform();
		// Click on 'Order Now'
		driver.findElement(By.xpath("//div/div[2]/div/a[1]")).click();
	}

	public static void provisioningDuringActivationOfOrders(String orderId) {
		String processId = "";
		checkIfActionExistsForOrder(orderId, "mbProvisionWait");

		// here we check if provisioning action is created

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionWait"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String result = resultSet.getString("RESULT");
				processId = resultSet.getString("PRI_ID");

				if ("mbProvisionWait".equals(actionName) && "RETRY".equals(result)) {
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							QueryUtils.queryUpdateActionInstanceScheduledTime(processId, "mbProvisionStart"));
					Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME); // 2mins
																	// sleep
				} else
					break;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionWait"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String result = resultSet.getString("RESULT");
				processId = resultSet.getString("PRI_ID");
				if ("mbProvisionWait".equals(actionName) && "ERROR".equals(result)) {
					// update action result=null, status = 'WAI', owner=null
					OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateOrderLines(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateCinProducts(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateOrdOrders(orderId));
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							QueryUtils.queryUpdateActionInstances(processId, "mbProvisionWait"));
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							QueryUtils.queryUpdateProcessInstances(processId, "MBSubscription"));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			System.out.println("starting provisioning");
			String provisioningSuccess = RestApiAutomation.provisioningSuccessSignalApiBody(processId,
					"MBprovisioningSignal");
			System.out.println(provisioningSuccess);
			RestApiAutomation.httpPostTest(Constant.cue_Update, provisioningSuccess);
			System.out.println("provisioning is completed, now the customer should be active");

			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String franceUniquePortInNumber() {
		String uniquePortInNumber = "";

		try {

			ResultSet resultSet = OracleJdbcConnection.numposDatabaseSelectQuery(
					QueryUtils.queryLatestPortinNumberfromNumposDB("FR", Constant.FR_Portin_Number));

			while (resultSet.next()) {
				String portInNumber = resultSet.getString("MAX_PORTING_NUMBER");
				uniquePortInNumber = "0" + String.valueOf(((Integer.parseInt(portInNumber)) + 1));
			}
		} catch (Exception e) {

		}

		return uniquePortInNumber;
	}

	public static boolean processNumposForFrancePortIn(String orderID) {

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "mbNumPosStart"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				String result = resultSet.getString("RESULT");

				if ("mbNumPosStart".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
					return true;
				}
				if ("mbNumPosStart".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
					return false;
				}
				if ("mbNumPosStart".equals(actionName) && "ERR".equals(status)) {
					return false;
				}
			}
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static boolean numposProvisioningStartToNow(String orderId) {

		// here we check if mbProvisionStart action is created

		for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
			try {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "mbProvisionStart"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String processId = resultSet.getString("PRI_ID");

					if ("mbProvisionStart".equals(actionName) && "FIN".equals(status)) {
						return true;
					}
					if ("mbProvisionStart".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("mbProvisionStart".equals(actionName) && "SCH".equals(status)) {
						OracleJdbcConnection.crmDatabaseUpdateQuery(
								QueryUtils.queryUpdateActionInstanceScheduledTime(processId, "mbProvisionStart"));
						// 2mins wait to process
						Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME);

					}

				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	public static boolean cancellationOfIncompleteOrderInShipWaitingStage(String orderID, String CancellationApiBody) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderID, "mbShipWaiting"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");

					if ("mbShipWaiting".equals(actionName) && "WAI".equals(status)) {
						RestApiAutomation.httpPostTest(Constant.cue_Execute, CancellationApiBody);
						return true;
					}
					if ("mbShipWaiting".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public static void terminateBillingDuringOrderCancellation(String orderId) {
		MVNOProjectSpecific.checkIfActionExistsForOrder(orderId, "orTerminateBilling");

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithOrderIdAndActionName(orderId, "orTerminateBilling"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				// String result = resultSet.getString("RESULT");
				String processId = resultSet.getString("PRI_ID");
				System.err.println(processId);

				if ("orTerminateBilling".equals(actionName) && "SCH".equals(status)) {
					OracleJdbcConnection.crmDatabaseUpdateQuery(
							QueryUtils.queryUpdateActionInstanceScheduledTime(processId, "orTerminateBilling"));
					Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME); // 2mins
																	// sleep
				} else
					break;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String uniqueEmailIdForFRCustomer() {
		// Taking a unique id from existing email id
		String latestEmailId = existingEmailIdForFRCustomer();
		String existingId = latestEmailId.split("_")[2].split("@")[0];
		String uniqueId = String.valueOf(((Integer.parseInt(existingId)) + 1));
		// Creating a new Email ID
		String newUniqueEmailID = "MVNO_Automation_" + uniqueId + "@test.fr";
		System.out.println(newUniqueEmailID);
		return newUniqueEmailID;
	}

	public static String existingEmailIdForFRCustomer() {
		String lastCustomerNumber = "";
		String latestEmailId = "";
		ResultSet customerNumber = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryMaxCustomerNumberFrCustomer());
		try {
			while (customerNumber.next()) {
				lastCustomerNumber = customerNumber.getString("MAX_CUSTOMER_NUMBER");
				System.out.println(lastCustomerNumber);
			}

			ResultSet emailId = OracleJdbcConnection
					.crmDatabaseSelectQuery(QueryUtils.queryLatestExistingCustomerEmailId(lastCustomerNumber));

			while (emailId.next()) {
				latestEmailId = emailId.getString("EMAIL_ADDRESS");
				System.out.println(latestEmailId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return latestEmailId;
	}

	public static String fetchPortOutRioCodeFromLatestCustomer() {

		String rioCode = "";
		String customerNumber = "";
		String cinProductNumber = "";
		ResultSet customerDetails = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryMaxCustomerNumberFrCustomer());

		try {
			while (customerDetails.next()) {

				customerNumber = customerDetails.getString("MAX_CUSTOMER_NUMBER");
				System.out.println("CUSTOMER NUMBER: " + customerNumber);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet cinProduct = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryLatestCinProductnumber(customerNumber));

		try {
			while (cinProduct.next()) {

				cinProductNumber = cinProduct.getString("MAX(CIN_NUMBER)");
				if (cinProduct.wasNull()) {
					System.out.println("Latest Cin product has no active subscriptions for this account");

					Assert.assertEquals(cinProductNumber, "1");
				} else {
					System.out.println("Cin product id: " + cinProductNumber);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet queryRioCode = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryPortoutID(cinProductNumber));

		try {
			while (queryRioCode.next()) {

				rioCode = queryRioCode.getString("ATTRIBUTE2");
				System.out.println("Port Out ID: " + rioCode);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return rioCode;
	}

	public static String fetchMsidnOfLatestCustomer() {

		String msisdn = "";
		String customerNumber = "";
		String cinProductNumber = "";
		ResultSet customerDetails = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryMaxCustomerNumberFrCustomer());

		try {
			while (customerDetails.next()) {

				customerNumber = customerDetails.getString("MAX_CUSTOMER_NUMBER");
				// System.out.println("CUSTOMER NUMBER: " + customerNumber);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet cinProduct = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryLatestCinProductnumber(customerNumber));

		try {
			while (cinProduct.next()) {

				cinProductNumber = cinProduct.getString("MAX(CIN_NUMBER)");
				if (cinProduct.wasNull()) {
					System.out.println("Cin product has no active subscriptions for this account");

					Assert.assertEquals(cinProductNumber, "1");
				} else {
					// System.out.println("Cin product id: " +
					// cinProductNumber);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet queryRioCode = OracleJdbcConnection
				.crmDatabaseSelectQuery(QueryUtils.queryCustomerMsisdn(cinProductNumber));

		try {
			while (queryRioCode.next()) {

				msisdn = queryRioCode.getString("ATTRIBUTE1");
				System.out.println("msidn: " + msisdn);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return msisdn;
	}

	public static boolean portOutProvisioningIsDone(String processId) {

		try {

			for (int i = 0; i < Constant.DEFAULT_RETRY_COUNT; i++) {
				ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
						QueryUtils.queryActionInstanceWithProcessIdAndActionName(processId, "pOProv"));

				while (resultSet.next()) {
					String actionName = resultSet.getString("NAME");
					String status = resultSet.getString("STATUS");
					String result = resultSet.getString("RESULT");

					if ("pOProv".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
						return true;
					}
					if ("pOProv".equals(actionName) && "ERR".equals(status)) {
						return false;
					}
					if ("pOProv".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
						// UPDATE ACTION_INSTANCES TABLE - ACTION TO WAITING
						OracleJdbcConnection
								.crmDatabaseUpdateQuery(QueryUtils.queryUpdateActionInstances(processId, "pOProv"));
						// UPDATE PROCESS INSTANCES TO PRC
						OracleJdbcConnection
								.crmDatabaseUpdateQuery(QueryUtils.queryUpdateProcessInstances(processId, "PortOut"));
						Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
						// UPDATE ACTION INSTANCES TABLE SCHEDULE TIME TO SYS
						// TIME
						// OracleJdbcConnection.crmDatabaseUpdateQuery(QueryUtils.queryUpdateActionInstanceScheduledTime(processId,
						// "pOProv"));
						Thread.sleep(Constant.DEFAULT_LONG_SLEEP_TIME);
						String PortOutProvisioning = RestApiAutomation.provisioningSuccessSignalApiBody(processId,
								"POprovisioningSignal");
						RestApiAutomation.httpPostTest(Constant.cue_Update, PortOutProvisioning);
						Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
					}
				}
				Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;

	}

	public static boolean processPortOutFinishIsDone(String processId) {

		try {
			ResultSet resultSet = OracleJdbcConnection.crmDatabaseSelectQuery(
					QueryUtils.queryActionInstanceWithProcessIdAndActionName(processId, "pONumPosFinish"));

			while (resultSet.next()) {
				String actionName = resultSet.getString("NAME");
				String status = resultSet.getString("STATUS");
				String result = resultSet.getString("RESULT");

				if ("pONumPosFinish".equals(actionName) && "FIN".equals(status) && "SUCCESS".equals(result)) {
					return true;
				}
				if ("pONumPosFinish".equals(actionName) && "FIN".equals(status) && "ERROR".equals(result)) {
					return false;
				}
				if ("pONumPosFinish".equals(actionName) && "ERR".equals(status)) {
					return false;
				}
			}
			Thread.sleep(Constant.DEFAULT_SHORT_SLEEP_TIME);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

}